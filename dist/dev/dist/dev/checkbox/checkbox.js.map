{"version":3,"sources":["checkbox/checkbox.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS;AAAU;;AACV;;AACA;;AACA;;AACA;;;4BAII,qBAFZ,cAAc,aAAd,WACA,OAAO,OAAP,WAGE,SAAS;AACR,4BAAoB,YAAY,MAAZ;OADrB,WAGA,oBACA;AAED,4BAAY,OAAZ,EAAqB;;;;;;;;;AACnB,eAAK,OAAL,GAAe,OAAf,CADmB;AAEnB,eAAK,SAAL,oBAAgC,WAAW,EAAX,EAAhC,CAFmB;AAGnB,eAAK,YAAL,GAAoB,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAApB,CAHmB;SAArB;;6BAMA,+BAAW;AACT,eAAK,gBAAL,GAAwB,IAAI,gBAAJ,CAAqB,KAAK,QAAL,CAA7C,CADS;AAET,cAAI,6BAA6B,KAAK,UAAL,CAAjC,EAAmD;AACjD,iBAAK,gBAAL,CAAsB,UAAtB,CAAiC,WAAjC,EADiD;WAAnD;AAGA,cAAI,KAAK,SAAL,KAAmB,IAAnB,EAAyB;AAC3B,iBAAK,QAAL,CAAc,aAAd,GAA8B,IAA9B,CAD2B;WAA7B,MAEO;AACL,iBAAK,QAAL,CAAc,aAAd,GAA8B,KAA9B,CADK;WAFP;AAKA,cAAI,6BAA6B,KAAK,UAAL,CAAjC,EAAmD;AACjD,iBAAK,QAAL,CAAc,QAAd,GAAyB,IAAzB,CADiD;WAAnD;AAGA,eAAK,QAAL,CAAc,OAAd,GAAwB,6BAA6B,KAAK,SAAL,CAArD,CAbS;AAcT,eAAK,QAAL,CAAc,gBAAd,CAA+B,QAA/B,EAAyC,KAAK,YAAL,CAAzC,CAdS;;;6BAiBX,+BAAW;AACT,eAAK,gBAAL,CAAsB,aAAtB,CAAoC,CAAC,WAAD,EAAc,UAAd,CAApC,EADS;AAET,eAAK,QAAL,CAAc,mBAAd,CAAkC,QAAlC,EAA4C,KAAK,YAAL,CAA5C,CAFS;;;6BAKX,uCAAe;AACb,eAAK,SAAL,GAAiB,KAAK,QAAL,CAAc,OAAd,CADJ;;;6BAIf,6CAAiB,UAAU;AACzB,cAAI,KAAK,QAAL,EAAe;AACjB,iBAAK,QAAL,CAAc,OAAd,GAAwB,CAAC,CAAC,QAAD,CADR;WAAnB;;;6BAKF,+CAAkB,UAAU;AAC1B,cAAI,KAAK,QAAL,EAAe;AACjB,iBAAK,QAAL,CAAc,QAAd,GAAyB,CAAC,CAAC,QAAD,CADT;WAAnB;;;;mBA9CK,KAAK","file":"checkbox/checkbox.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customElement } from 'aurelia-templating';\nimport { bindingMode } from 'aurelia-binding';\nimport { inject } from 'aurelia-dependency-injection';\nimport { AttributeManager } from '../common/attributeManager';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\n\n@customElement('md-checkbox')\n@inject(Element)\nexport class MdCheckbox {\n  static id = 0;\n  @bindable({\n    defaultBindingMode: bindingMode.twoWay\n  }) mdChecked;\n  @bindable() mdDisabled;\n  @bindable() mdFilledIn;\n\n  constructor(element) {\n    this.element = element;\n    this.controlId = `md-checkbox-${MdCheckbox.id++}`;\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  attached() {\n    this.attributeManager = new AttributeManager(this.checkbox);\n    if (getBooleanFromAttributeValue(this.mdFilledIn)) {\n      this.attributeManager.addClasses('filled-in');\n    }\n    if (this.mdChecked === null) {\n      this.checkbox.indeterminate = true;\n    } else {\n      this.checkbox.indeterminate = false;\n    }\n    if (getBooleanFromAttributeValue(this.mdDisabled)) {\n      this.checkbox.disabled = true;\n    }\n    this.checkbox.checked = getBooleanFromAttributeValue(this.mdChecked);\n    this.checkbox.addEventListener('change', this.handleChange);\n  }\n\n  detached() {\n    this.attributeManager.removeClasses(['filled-in', 'disabled']);\n    this.checkbox.removeEventListener('change', this.handleChange);\n  }\n\n  handleChange() {\n    this.mdChecked = this.checkbox.checked;\n  }\n\n  mdCheckedChanged(newValue) {\n    if (this.checkbox) {\n      this.checkbox.checked = !!newValue;\n    }\n  }\n\n  mdDisabledChanged(newValue) {\n    if (this.checkbox) {\n      this.checkbox.disabled = !!newValue;\n    }\n  }\n}\n"]}