{"version":3,"sources":["checkbox/checkbox.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS,c,sBAAA,Q;AAAU,mB,sBAAA,a;;AACV,iB,mBAAA,W;;AACA,Y,+BAAA,M;;AACA,sB,2BAAA,gB;;AACA,kC,qBAAA,4B;;;4BAII,U,WAFZ,cAAc,aAAd,C,UACA,OAAO,OAAP,C,UAGE,SAAS;AACR,4BAAoB,YAAY;AADxB,OAAT,C,UAGA,U,UACA,U;AAED,4BAAY,OAAZ,EAAqB;AAAA;;AAAA;;AAAA;;AAAA;;AACnB,eAAK,OAAL,GAAe,OAAf;AACA,eAAK,SAAL,oBAAgC,WAAW,EAAX,EAAhC;AACA,eAAK,YAAL,GAAoB,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAApB;AACD;;6BAED,Q,uBAAW;AACT,eAAK,gBAAL,GAAwB,IAAI,gBAAJ,CAAqB,KAAK,QAA1B,CAAxB;AACA,cAAI,6BAA6B,KAAK,UAAlC,CAAJ,EAAmD;AACjD,iBAAK,gBAAL,CAAsB,UAAtB,CAAiC,WAAjC;AACD;AACD,cAAI,KAAK,SAAL,KAAmB,IAAvB,EAA6B;AAC3B,iBAAK,QAAL,CAAc,aAAd,GAA8B,IAA9B;AACD,WAFD,MAEO;AACL,iBAAK,QAAL,CAAc,aAAd,GAA8B,KAA9B;AACD;AACD,cAAI,6BAA6B,KAAK,UAAlC,CAAJ,EAAmD;AACjD,iBAAK,QAAL,CAAc,QAAd,GAAyB,IAAzB;AACD;AACD,eAAK,QAAL,CAAc,OAAd,GAAwB,6BAA6B,KAAK,SAAlC,CAAxB;AACA,eAAK,QAAL,CAAc,gBAAd,CAA+B,QAA/B,EAAyC,KAAK,YAA9C;AACD,S;;6BAED,Q,uBAAW;AACT,eAAK,gBAAL,CAAsB,aAAtB,CAAoC,CAAC,WAAD,EAAc,UAAd,CAApC;AACA,eAAK,QAAL,CAAc,mBAAd,CAAkC,QAAlC,EAA4C,KAAK,YAAjD;AACD,S;;6BAED,Y,2BAAe;AACb,eAAK,SAAL,GAAiB,KAAK,QAAL,CAAc,OAA/B;AACD,S;;6BAED,gB,6BAAiB,Q,EAAU;AACzB,cAAI,KAAK,QAAT,EAAmB;AACjB,iBAAK,QAAL,CAAc,OAAd,GAAwB,CAAC,CAAC,QAA1B;AACD;AACF,S;;6BAED,iB,8BAAkB,Q,EAAU;AAC1B,cAAI,KAAK,QAAT,EAAmB;AACjB,iBAAK,QAAL,CAAc,QAAd,GAAyB,CAAC,CAAC,QAA3B;AACD;AACF,S;;;mBAjDM,E,GAAK,C","file":"checkbox/checkbox.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customElement } from 'aurelia-templating';\r\nimport { bindingMode } from 'aurelia-binding';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { AttributeManager } from '../common/attributeManager';\r\nimport { getBooleanFromAttributeValue } from '../common/attributes';\r\n\r\n@customElement('md-checkbox')\r\n@inject(Element)\r\nexport class MdCheckbox {\r\n  static id = 0;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.twoWay\r\n  }) mdChecked;\r\n  @bindable() mdDisabled;\r\n  @bindable() mdFilledIn;\r\n\r\n  constructor(element) {\r\n    this.element = element;\r\n    this.controlId = `md-checkbox-${MdCheckbox.id++}`;\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  attached() {\r\n    this.attributeManager = new AttributeManager(this.checkbox);\r\n    if (getBooleanFromAttributeValue(this.mdFilledIn)) {\r\n      this.attributeManager.addClasses('filled-in');\r\n    }\r\n    if (this.mdChecked === null) {\r\n      this.checkbox.indeterminate = true;\r\n    } else {\r\n      this.checkbox.indeterminate = false;\r\n    }\r\n    if (getBooleanFromAttributeValue(this.mdDisabled)) {\r\n      this.checkbox.disabled = true;\r\n    }\r\n    this.checkbox.checked = getBooleanFromAttributeValue(this.mdChecked);\r\n    this.checkbox.addEventListener('change', this.handleChange);\r\n  }\r\n\r\n  detached() {\r\n    this.attributeManager.removeClasses(['filled-in', 'disabled']);\r\n    this.checkbox.removeEventListener('change', this.handleChange);\r\n  }\r\n\r\n  handleChange() {\r\n    this.mdChecked = this.checkbox.checked;\r\n  }\r\n\r\n  mdCheckedChanged(newValue) {\r\n    if (this.checkbox) {\r\n      this.checkbox.checked = !!newValue;\r\n    }\r\n  }\r\n\r\n  mdDisabledChanged(newValue) {\r\n    if (this.checkbox) {\r\n      this.checkbox.disabled = !!newValue;\r\n    }\r\n  }\r\n}\r\n"]}