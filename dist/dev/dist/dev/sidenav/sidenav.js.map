{"version":3,"sources":["sidenav/sidenav.js"],"names":[],"mappings":";;;uFAOa,SAAS;;;;;;;;;;oCAPb,QAAQ;yCAAE,aAAa;;2CACvB,MAAM;;uDACN,4BAA4B;;iDAC5B,gBAAgB;;;AAIZ,eAAS;;;8BAAT,SAAS;;uBAEnB,QAAQ,EAAE;;mBAAgB,IAAI;;;;;uBAC9B,QAAQ,EAAE;;mBAAQ,MAAM;;;;;uBACxB,QAAQ,EAAE;;mBAAS,KAAK;;;;;uBACxB,QAAQ,EAAE;;mBAAW,GAAG;;;;;iBAJb,CAAC;;;;AAMF,iBAPA,SAAS,CAOR,OAAO,EAAE;;;;;;;;;;;AACnB,cAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,cAAI,CAAC,SAAS,mBAAiB,SAAS,CAAC,EAAE,EAAE,AAAE,CAAC;SACjD;;AAVU,iBAAS,WAYpB,QAAQ,GAAA,oBAAG;AACT,cAAI,CAAC,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC3D,cAAI,4BAA4B,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AAC5C,gBAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;WAC3C;SACF;;AAjBU,iBAAS,WAmBpB,QAAQ,GAAA,oBAAG;AACT,cAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;SAC9C;;AArBU,iBAAS,WAuBpB,YAAY,GAAA,sBAAC,QAAQ,EAAE;AACrB,cAAI,IAAI,CAAC,gBAAgB,EAAE;AACzB,gBAAI,QAAQ,EAAE;AACZ,kBAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;aAC3C,MAAM;AACL,kBAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAC9C;WACF;SACF;;yBA/BU,SAAS;AAAT,iBAAS,GADrB,MAAM,CAAC,OAAO,CAAC,CACH,SAAS,KAAT,SAAS;AAAT,iBAAS,GAFrB,aAAa,CAAC,YAAY,CAAC,CAEf,SAAS,KAAT,SAAS;eAAT,SAAS","file":"sidenav/sidenav.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customElement } from 'aurelia-templating';\nimport { inject } from 'aurelia-dependency-injection';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\nimport { AttributeManager } from '../common/attributeManager';\n\n@customElement('md-sidenav')\n@inject(Element)\nexport class MdSidenav {\n  static id = 0;\n  @bindable() closeOnClick = true;\n  @bindable() edge = 'left';\n  @bindable() fixed = false;\n  @bindable() mdWidth = 250;\n\n  constructor(element) {\n    this.element = element;\n    this.controlId = `md-sidenav-${MdSidenav.id++}`;\n  }\n\n  attached() {\n    this.attributeManager = new AttributeManager(this.sidenav);\n    if (getBooleanFromAttributeValue(this.fixed)) {\n      this.attributeManager.addClasses('fixed');\n    }\n  }\n\n  detached() {\n    this.attributeManager.removeClasses('fixed');\n  }\n\n  fixedChanged(newValue) {\n    if (this.attributeManager) {\n      if (newValue) {\n        this.attributeManager.addClasses('fixed');\n      } else {\n        this.attributeManager.removeClasses('fixed');\n      }\n    }\n  }\n}\n"]}