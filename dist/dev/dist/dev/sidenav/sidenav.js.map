{"version":3,"sources":["sidenav/sidenav.js"],"names":[],"mappings":";;;kGAQa,SAAS;;;;;;;;;;oCARb,QAAQ;yCAAE,aAAa;;2CACvB,MAAM;;uDACN,4BAA4B;;iDAC5B,gBAAgB;;kCAChB,SAAS;;;AAIL,eAAS;;;8BAAT,SAAS;;uBAEnB,QAAQ,EAAE;;mBAAkB,KAAK;;;;;uBACjC,QAAQ,EAAE;;mBAAU,MAAM;;;;;uBAC1B,QAAQ,EAAE;;mBAAW,KAAK;;;;;uBAC1B,QAAQ,EAAE;;mBAAW,GAAG;;;;;iBAJb,CAAC;;;;AASF,iBAVA,SAAS,CAUR,OAAO,EAAE;;;;;;;;;;;;;AACnB,cAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,cAAI,CAAC,SAAS,mBAAiB,SAAS,CAAC,EAAE,EAAE,AAAE,CAAC;AAChD,cAAI,CAAC,GAAG,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC;AACnC,cAAI,CAAC,YAAY,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACnD,kBAAK,gBAAgB,GAAG,OAAO,CAAC;WACjC,CAAC,CAAC;SACJ;;AAjBU,iBAAS,WAmBpB,QAAQ,GAAA,oBAAG;AACT,cAAI,CAAC,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC3D,cAAI,4BAA4B,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;AAC9C,gBAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAC1C,gBAAI,IAAI,CAAC,MAAM,KAAK,OAAO,EAAE;AAE3B,kBAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;aACnD;WACF;;AAED,cAAI,CAAC,gBAAgB,EAAE,CAAC;SACzB;;AA9BU,iBAAS,WAgCpB,QAAQ,GAAA,oBAAG;AACT,cAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC;SACjE;;AAlCU,iBAAS,WAoCpB,YAAY,GAAA,sBAAC,QAAQ,EAAE;AACrB,cAAI,IAAI,CAAC,gBAAgB,EAAE;AACzB,gBAAI,QAAQ,EAAE;AACZ,kBAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;aAC3C,MAAM;AACL,kBAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAC9C;WACF;SACF;;yBA5CU,SAAS;AAAT,iBAAS,GADrB,MAAM,CAAC,OAAO,CAAC,CACH,SAAS,KAAT,SAAS;AAAT,iBAAS,GAFrB,aAAa,CAAC,YAAY,CAAC,CAEf,SAAS,KAAT,SAAS;eAAT,SAAS","file":"sidenav/sidenav.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customElement } from 'aurelia-templating';\nimport { inject } from 'aurelia-dependency-injection';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\nimport { AttributeManager } from '../common/attributeManager';\nimport { getLogger } from 'aurelia-logging';\n\n@customElement('md-sidenav')\n@inject(Element)\nexport class MdSidenav {\n  static id = 0;\n  @bindable() mdCloseOnClick = false;\n  @bindable() mdEdge = 'left';\n  @bindable() mdFixed = false;\n  @bindable() mdWidth = 250;\n\n  attachedResolver;\n  whenAttached;\n\n  constructor(element) {\n    this.element = element;\n    this.controlId = `md-sidenav-${MdSidenav.id++}`;\n    this.log = getLogger('md-sidenav');\n    this.whenAttached = new Promise((resolve, reject) => {\n      this.attachedResolver = resolve;\n    });\n  }\n\n  attached() {\n    this.attributeManager = new AttributeManager(this.sidenav);\n    if (getBooleanFromAttributeValue(this.mdFixed)) {\n      this.attributeManager.addClasses('fixed');\n      if (this.mdEdge === 'right') {\n        // see: https://github.com/aurelia-ui-toolkits/aurelia-materialize-bridge/issues/53\n        this.attributeManager.addClasses('right-aligned');\n      }\n    }\n\n    this.attachedResolver();\n  }\n\n  detached() {\n    this.attributeManager.removeClasses(['fixed', 'right-aligned']);\n  }\n\n  fixedChanged(newValue) {\n    if (this.attributeManager) {\n      if (newValue) {\n        this.attributeManager.addClasses('fixed');\n      } else {\n        this.attributeManager.removeClasses('fixed');\n      }\n    }\n  }\n}\n"]}