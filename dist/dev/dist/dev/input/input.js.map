{"version":3,"sources":["input/input.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS;AAAU;;AACV;;AACA;;AACA;;AACA;;AACA;;AACA;;;yBAII,kBAFZ,cAAc,UAAd,WACA,OAAO,OAAP,EAAgB,SAAhB,EAA2B,oBAA3B,WAIE,oBACA,oBACA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,YAGA,SAAS;AACR,4BAAoB,YAAY,OAAZ;OADrB,YAGA,qBACA,qBACA,SAAS;AACR,4BAAoB,YAAY,MAAZ;OADrB;AAMD,yBAAY,OAAZ,EAAqB,SAArB,EAAgC,aAAhC,EAA+C;;;;;;;;;;;;;;;;;;;;;;;;;eAF/C,iBAAiB,MAE8B;;AAC7C,eAAK,OAAL,GAAe,OAAf,CAD6C;AAE7C,eAAK,SAAL,GAAiB,SAAjB,CAF6C;AAG7C,eAAK,SAAL,iBAA6B,QAAQ,EAAR,EAA7B,CAH6C;AAI7C,eAAK,aAAL,GAAqB,aAArB,CAJ6C;SAA/C;;0BAOA,uBAAO;AACL,eAAK,UAAL,GAAkB,6BAA6B,KAAK,UAAL,CAA/C,CADK;AAEL,eAAK,eAAL,GAAuB,6BAA6B,KAAK,eAAL,CAApD,CAFK;;;0BAKP,+BAAW;AACT,cAAI,6BAA6B,KAAK,UAAL,CAAjC,EAAmD;AACjD,iBAAK,KAAL,CAAW,SAAX,CAAqB,GAArB,CAAyB,UAAzB,EADiD;WAAnD;AAGA,cAAI,KAAK,eAAL,EAAuB;AACzB,iBAAK,KAAL,CAAW,YAAX,CAAwB,YAAxB,EAAsC,KAAK,eAAL,CAAtC,CADyB;WAA3B;AAGA,cAAI,KAAK,iBAAL,EAAyB;AAC3B,iBAAK,KAAL,CAAW,YAAX,CAAwB,cAAxB,EAAwC,KAAK,iBAAL,CAAxC,CAD2B;WAA7B;AAGA,cAAI,KAAK,aAAL,EAAoB;AACtB,iBAAK,KAAL,CAAW,YAAX,CAAwB,aAAxB,EAAuC,KAAK,aAAL,CAAvC,CADsB;WAAxB;AAGA,cAAI,KAAK,eAAL,EAAsB;AACxB,iBAAK,KAAL,CAAW,YAAX,CAAwB,qBAAxB,EAA+C,KAAK,eAAL,CAA/C,CADwB;WAA1B;AAGA,eAAK,aAAL,CAAmB,MAAnB,GAhBS;;AAmBT,cAAI,KAAK,MAAL,KAAgB,MAAhB,EAAwB;AAC1B,cAAE,KAAK,KAAL,CAAF,CAAc,QAAd,CAAuB,OAAvB,EAAgC,QAAhC,CAAyC,QAAzC,EAD0B;WAA5B;;;0BAKF,uBAAO;AACL,oBAAU,KAAK,OAAL,EAAc,MAAxB,EADK;;;0BAIP,2CAAiB;AACf,cAAI,CAAC,EAAE,KAAK,KAAL,CAAF,CAAc,EAAd,CAAiB,QAAjB,CAAD,EAA6B;AAC/B,iBAAK,aAAL,CAAmB,MAAnB,GAD+B;WAAjC;AAGA,cAAI,KAAK,UAAL,EAAiB;AACnB,cAAE,KAAK,KAAL,CAAF,CAAc,OAAd,CAAsB,YAAtB,EADmB;WAArB;;;;mBA1EK,KAAK;;;iBAEU;;;;;iBACG;;;;;iBAGN;;;;;iBAGH;;;;;iBAGJ;;;;;iBAGA;;;;;iBAGI;;;;;iBAGK;;;;;;;;;;;iBAKR","file":"input/input.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customElement } from 'aurelia-templating';\r\nimport { bindingMode } from 'aurelia-binding';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { TaskQueue } from 'aurelia-task-queue';\r\nimport { getBooleanFromAttributeValue } from '../common/attributes';\r\nimport { MdInputUpdateService } from './input-update-service';\r\nimport { fireEvent } from '../common/events';\r\n\r\n@customElement('md-input')\r\n@inject(Element, TaskQueue, MdInputUpdateService)\r\nexport class MdInput {\r\n  static id = 0;\r\n\r\n  @bindable() mdLabel = '';\r\n  @bindable() mdDisabled = false;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) mdPlaceholder = '';\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) mdTextArea = false;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) mdType = 'text';\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) mdStep = 'any';\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) mdValidate = false;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) mdShowErrortext = true;\r\n  @bindable() mdValidateError;\r\n  @bindable() mdValidateSuccess;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.twoWay\r\n  }) mdValue = '';\r\n\r\n  _suspendUpdate = false;\r\n\r\n  constructor(element, taskQueue, updateService) {\r\n    this.element = element;\r\n    this.taskQueue = taskQueue;\r\n    this.controlId = `md-input-${MdInput.id++}`;\r\n    this.updateService = updateService;\r\n  }\r\n\r\n  bind() {\r\n    this.mdTextArea = getBooleanFromAttributeValue(this.mdTextArea);\r\n    this.mdShowErrortext = getBooleanFromAttributeValue(this.mdShowErrortext);\r\n  }\r\n\r\n  attached() {\r\n    if (getBooleanFromAttributeValue(this.mdValidate)) {\r\n      this.input.classList.add('validate');\r\n    }\r\n    if (this.mdValidateError)  {\r\n      this.label.setAttribute('data-error', this.mdValidateError);\r\n    }\r\n    if (this.mdValidateSuccess)  {\r\n      this.label.setAttribute('data-success', this.mdValidateSuccess);\r\n    }\r\n    if (this.mdPlaceholder) {\r\n      this.input.setAttribute('placeholder', this.mdPlaceholder);\r\n    }\r\n    if (this.mdShowErrortext) {\r\n      this.input.setAttribute('data-show-errortext', this.mdShowErrortext);\r\n    }\r\n    this.updateService.update();\r\n\r\n    // special case: time inputs are not covered by Materialize\r\n    if (this.mdType === 'time') {\r\n      $(this.input).siblings('label').addClass('active');\r\n    }\r\n  }\r\n\r\n  blur() {\r\n    fireEvent(this.element, 'blur');\r\n  }\r\n\r\n  mdValueChanged() {\r\n    if (!$(this.input).is(':focus')) {\r\n      this.updateService.update();\r\n    }\r\n    if (this.mdTextArea) {\r\n      $(this.input).trigger('autoresize');\r\n    }\r\n  }\r\n}\r\n"]}