{"version":3,"sources":["radio/radio.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS,c,sBAAA,Q;AAAU,mB,sBAAA,a;;AACV,iB,mBAAA,W;;AACA,Y,+BAAA,M;;AACA,sB,2BAAA,gB;;AACA,kC,qBAAA,4B;;;yBAII,O,WAFZ,cAAc,UAAd,C,UACA,OAAO,OAAP,C,UAGE,SAAS;AACR,4BAAoB,YAAY;AADxB,OAAT,C,UAGA,U,UACA,U,UACA,U,UACA,U,UACA,U;AAED,yBAAY,OAAZ,EAAqB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACnB,eAAK,OAAL,GAAe,OAAf;AACA,eAAK,SAAL,iBAA6B,QAAQ,EAAR,EAA7B;AAED;;0BAED,Q,uBAAW;AACT,eAAK,gBAAL,GAAwB,IAAI,gBAAJ,CAAqB,KAAK,KAA1B,CAAxB;AACA,cAAI,6BAA6B,KAAK,KAAlC,CAAJ,EAA8C;AAC5C,iBAAK,gBAAL,CAAsB,UAAtB,CAAiC,UAAjC;AACD;AACD,cAAI,6BAA6B,KAAK,UAAlC,CAAJ,EAAmD;AACjD,iBAAK,KAAL,CAAW,QAAX,GAAsB,IAAtB;AACD;AAGF,S;;0BAED,Q,uBAAW;AACT,eAAK,gBAAL,CAAsB,aAAtB,CAAoC,CAAC,UAAD,EAAa,UAAb,CAApC;AAED,S;;0BAYD,iB,8BAAkB,Q,EAAU;AAC1B,cAAI,KAAK,KAAT,EAAgB;AACd,iBAAK,KAAL,CAAW,QAAX,GAAsB,CAAC,CAAC,QAAxB;AACD;AACF,S;;;mBA/CM,E,GAAK,C;;;;;;iBAIa,K;;;;;iBACL,K;;;;;;;;iBAEC,E;;;;;iBACC,E","file":"radio/radio.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customElement } from 'aurelia-templating';\r\nimport { bindingMode } from 'aurelia-binding';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { AttributeManager } from '../common/attributeManager';\r\nimport { getBooleanFromAttributeValue } from '../common/attributes';\r\n\r\n@customElement('md-radio')\r\n@inject(Element)\r\nexport class MdRadio {\r\n  static id = 0;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.twoWay\r\n  }) mdChecked;\r\n  @bindable() mdDisabled = false;\r\n  @bindable() mdGap = false;\r\n  @bindable() mdModel;\r\n  @bindable() mdName = '';\r\n  @bindable() mdValue = '';\r\n\r\n  constructor(element) {\r\n    this.element = element;\r\n    this.controlId = `md-radio-${MdRadio.id++}`;\r\n    // this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  attached() {\r\n    this.attributeManager = new AttributeManager(this.radio);\r\n    if (getBooleanFromAttributeValue(this.mdGap)) {\r\n      this.attributeManager.addClasses('with-gap');\r\n    }\r\n    if (getBooleanFromAttributeValue(this.mdDisabled)) {\r\n      this.radio.disabled = true;\r\n    }\r\n    // this.radio.checked = getBooleanFromAttributeValue(this.mdChecked);\r\n    // this.radio.addEventListener('change', this.handleChange);\r\n  }\r\n\r\n  detached() {\r\n    this.attributeManager.removeClasses(['with-gap', 'disabled']);\r\n    // this.radio.removeEventListener('change', this.handleChange);\r\n  }\r\n\r\n  // handleChange() {\r\n  //   this.mdChecked = this.radio.checked;\r\n  // }\r\n\r\n  // mdCheckedChanged(newValue) {\r\n  //   if (this.radio) {\r\n  //     this.radio.checked = !!newValue;\r\n  //   }\r\n  // }\r\n\r\n  mdDisabledChanged(newValue) {\r\n    if (this.radio) {\r\n      this.radio.disabled = !!newValue;\r\n    }\r\n  }\r\n}\r\n"]}