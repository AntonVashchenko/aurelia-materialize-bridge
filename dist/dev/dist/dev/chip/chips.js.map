{"version":3,"sources":["chip/chips.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQ;AAAU;;AACV;;AACA;;;yBAMK,kBAFZ,gBAAgB,UAAhB,WACA,OAAO,OAAP,WAEE,oBACA,oBACA;AAED,yBAAY,OAAZ,EAAqB;;;;;;;;;AACnB,eAAK,OAAL,GAAe,OAAf,CADmB;AAEnB,eAAK,GAAL,GAAW,UAAU,UAAV,CAAX,CAFmB;;AAInB,eAAK,SAAL,GAAiB,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAjB,CAJmB;AAKnB,eAAK,YAAL,GAAoB,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAApB,CALmB;AAMnB,eAAK,YAAL,GAAoB,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAApB,CANmB;SAArB;;0BASA,+BAAW;AACT,cAAI,UAAU;AACZ,kBAAM,KAAK,IAAL;AACN,yBAAa,KAAK,WAAL;AACb,kCAAsB,KAAK,oBAAL;WAHpB,CADK;AAMT,YAAE,KAAK,OAAL,CAAF,CAAgB,aAAhB,CAA8B,OAA9B,EANS;AAOT,YAAE,KAAK,OAAL,CAAF,CAAgB,EAAhB,CAAmB,UAAnB,EAA+B,KAAK,SAAL,CAA/B,CAPS;AAQT,YAAE,KAAK,OAAL,CAAF,CAAgB,EAAhB,CAAmB,aAAnB,EAAkC,KAAK,YAAL,CAAlC,CARS;AAST,YAAE,KAAK,OAAL,CAAF,CAAgB,EAAhB,CAAmB,aAAnB,EAAkC,KAAK,YAAL,CAAlC,CATS;;;0BAYX,+BAAW;;0BAIX,+BAAU,GAAG,MAAM;;0BAGnB,qCAAa,GAAG,MAAM;;0BAGtB,qCAAa,GAAG,MAAM;;;;;;iBAnCH;;;;;iBACO;;;;;iBACS","file":"chip/chips.js","sourceRoot":"/source/","sourcesContent":["import {bindable, customAttribute} from 'aurelia-templating';\r\nimport {inject} from 'aurelia-dependency-injection';\r\nimport {getLogger} from 'aurelia-logging';\r\n\n// import {fireEvent} from '../common/events';\n\n@customAttribute('md-chips')\r\n@inject(Element)\r\nexport class MdChips {\r\n  @bindable() data = [];\r\n  @bindable() placeholder = '';\r\n  @bindable() secondaryPlaceholder = '';\r\n\r\n  constructor(element) {\r\n    this.element = element;\r\n    this.log = getLogger('md-chips');\r\n\r\n    this.onChipAdd = this.onChipAdd.bind(this);\r\n    this.onChipDelete = this.onChipDelete.bind(this);\r\n    this.onChipSelect = this.onChipSelect.bind(this);\r\n  }\r\n\r\n  attached() {\r\n    let options = {\r\n      data: this.data,\r\n      placeholder: this.placeholder,\r\n      secondaryPlaceholder: this.secondaryPlaceholder\r\n    };\r\n    $(this.element).material_chip(options);\r\n    $(this.element).on('chip.add', this.onChipAdd);\r\n    $(this.element).on('chip.delete', this.onChipDelete);\r\n    $(this.element).on('chip.select', this.onChipSelect);\r\n  }\r\n\r\n  detached() {\r\n    //\r\n  }\r\n\r\n  onChipAdd(e, chip) {\n    // fireEvent(this.element, 'change');\n  }\n  onChipDelete(e, chip) {\n    // fireEvent(this.element, 'change');\n  }\n  onChipSelect(e, chip) {\n    // fireEvent(this.element, 'change');\n  }\n}\r\n"]}