{"version":3,"sources":["pagination/pagination.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS;AAAU;;AACV;;AACA;;AACA;;AACA;;;8BAKI,uBAFZ,cAAc,eAAd,WACA,OAAO,OAAP,WAEE,SAAS;AACR,4BAAoB,YAAY,MAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,MAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,MAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,MAAZ;OADrB,WAGA,oBACA,oBACA;AAED,8BAAY,OAAZ,EAAqB;;;;;;;;;;;;;;;;;AACnB,eAAK,OAAL,GAAe,OAAf,CADmB;SAArB;;+BAIA,uBAAO;AAEL,eAAK,OAAL,GAAe,SAAS,KAAK,OAAL,EAAc,EAAvB,CAAf,CAFK;;AAIL,eAAK,kBAAL,GAA0B,KAAK,GAAL,CAAS,SAAS,KAAK,kBAAL,EAAyB,EAAlC,CAAT,EAAgD,KAAK,OAAL,CAA1E,CAJK;AAKL,eAAK,cAAL,GAAsB,6BAA6B,KAAK,cAAL,CAAnD,CALK;AAML,eAAK,WAAL,GAAmB,KAAK,iBAAL,EAAnB,CANK;;;+BASP,uCAAc,MAAM;AAClB,eAAK,YAAL,GAAoB,IAApB,CADkB;AAElB,eAAK,WAAL,GAAmB,KAAK,iBAAL,EAAnB,CAFkB;AAGlB,+BAAqB,KAAK,OAAL,EAAc,cAAnC,EAAmD,KAAK,YAAL,CAAnD,CAHkB;;;+BAMpB,uCAAe;AACb,cAAI,KAAK,YAAL,GAAoB,CAApB,EAAuB;AACzB,iBAAK,aAAL,CAAmB,CAAnB,EADyB;WAA3B;;;+BAKF,qCAAc;AACZ,cAAI,KAAK,YAAL,GAAoB,KAAK,OAAL,EAAc;AACpC,iBAAK,aAAL,CAAmB,KAAK,OAAL,CAAnB,CADoC;WAAtC;;;+BAKF,6CAAkB;AAChB,cAAI,KAAK,YAAL,GAAoB,CAApB,EAAuB;AACzB,iBAAK,aAAL,CAAmB,KAAK,YAAL,GAAoB,CAApB,CAAnB,CADyB;WAA3B;;;+BAKF,qCAAc;AACZ,cAAI,KAAK,YAAL,GAAoB,KAAK,OAAL,EAAc;AACpC,iBAAK,aAAL,CAAmB,KAAK,YAAL,GAAoB,CAApB,CAAnB,CADoC;WAAtC;;;+BAKF,iEAA4B;AAE1B,eAAK,WAAL,GAAmB,KAAK,iBAAL,EAAnB,CAF0B;;;+BAK5B,iDAAoB;AAClB,cAAI,gBAAgB,SAAS,KAAK,kBAAL,EAAyB,EAAlC,CAAhB,CADc;AAElB,cAAI,WAAW,aAAC,GAAgB,CAAhB,GAAqB,CAAtB,CAFG;AAGlB,cAAI,QAAQ,KAAK,GAAL,CAAS,KAAK,YAAL,GAAoB,QAApB,EAA8B,CAAvC,CAAR,CAHc;AAIlB,cAAI,MAAM,KAAK,GAAL,CAAS,QAAQ,aAAR,EAAuB,KAAK,OAAL,CAAtC,CAJc;;AAMlB,cAAI,OAAO,EAAP,CANc;AAOlB,eAAK,IAAI,IAAI,KAAJ,EAAW,IAAI,GAAJ,EAAS,GAA7B,EAAkC;AAChC,iBAAK,IAAL,CAAU,CAAV,EADgC;WAAlC;;AAIA,iBAAO,IAAP,CAXkB;;;;;;;iBA9DF;;;;;iBAGL;;;;;iBAGW;;;;;iBAGP;;;;;iBACa;;;;;iBACD;;;;;iBACC","file":"pagination/pagination.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customElement } from 'aurelia-templating';\nimport { bindingMode } from 'aurelia-binding';\nimport { inject } from 'aurelia-dependency-injection';\nimport { fireMaterializeEvent } from '../common/events';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\n\n\n@customElement('md-pagination')\n@inject(Element)\nexport class MdPagination {\n  @bindable({\n    defaultBindingMode: bindingMode.twoWay\n  }) mdActivePage = 1;\n  @bindable({\n    defaultBindingMode: bindingMode.oneWay\n  }) mdPages = 5;\n  @bindable({\n    defaultBindingMode: bindingMode.oneWay\n  }) mdVisiblePageLinks = 15;\n  @bindable({\n    defaultBindingMode: bindingMode.oneWay\n  }) mdPageLinks = [];\n  @bindable() mdShowFirstLast = true;\n  @bindable() mdShowPrevNext = true;\n  @bindable() mdShowPageLinks = true;\n\n  constructor(element) {\n    this.element = element;\n  }\n\n  bind() {\n    // attached() throws unhandled exceptions\n    this.mdPages = parseInt(this.mdPages, 10);\n    // We don't want mdVisiblePageLinks to be greater than mdPages\n    this.mdVisiblePageLinks = Math.min(parseInt(this.mdVisiblePageLinks, 10), this.mdPages);\n    this.mdShowPrevNext = getBooleanFromAttributeValue(this.mdShowPrevNext);\n    this.mdPageLinks = this.generatePageLinks();\n  }\n\n  setActivePage(page) {\n    this.mdActivePage = page;\n    this.mdPageLinks = this.generatePageLinks();\n    fireMaterializeEvent(this.element, 'page-changed', this.mdActivePage);\n  }\n\n  setFirstPage() {\n    if (this.mdActivePage > 1) {\n      this.setActivePage(1);\n    }\n  }\n\n  setLastPage() {\n    if (this.mdActivePage < this.mdPages) {\n      this.setActivePage(this.mdPages);\n    }\n  }\n\n  setPreviousPage() {\n    if (this.mdActivePage > 1) {\n      this.setActivePage(this.mdActivePage - 1);\n    }\n  }\n\n  setNextPage() {\n    if (this.mdActivePage < this.mdPages) {\n      this.setActivePage(this.mdActivePage + 1);\n    }\n  }\n\n  mdVisiblePageLinksChanged() {\n    //alert('dd');\n    this.mdPageLinks = this.generatePageLinks();\n  }\n\n  generatePageLinks() {\n    let numberOfLinks = parseInt(this.mdVisiblePageLinks, 10);\n    let midPoint = (numberOfLinks / 2) + 1;\n    let start = Math.max(this.mdActivePage - midPoint, 0);\n    let end = Math.min(start + numberOfLinks, this.mdPages);\n\n    let list = [];\n    for (let i = start; i < end; i++) {\n      list.push(i);\n    }\n\n    return list;\n  }\n}\n"]}