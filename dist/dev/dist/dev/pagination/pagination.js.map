{"version":3,"sources":["pagination/pagination.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS;AAAU;;AACV;;AACA;;AACA;;AACA;;;8BAKI,uBAFZ,cAAc,eAAd,WACA,OAAO,OAAP,WAEE,SAAS;AACR,4BAAoB,YAAY,MAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,MAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,MAAZ;OADrB,WAGA,SAAS;AACR,4BAAoB,YAAY,MAAZ;OADrB,WAGA,oBACA,oBACA;AAED,iBAjBW,YAiBX,CAAY,OAAZ,EAAqB;gCAjBV,cAiBU;;;;;;;;;;;;;;;;AACnB,eAAK,OAAL,GAAe,OAAf,CADmB;SAArB;;AAjBW,+BAqBX,uBAAO;AAEL,eAAK,OAAL,GAAe,SAAS,KAAK,OAAL,EAAc,EAAvB,CAAf,CAFK;;AAIL,eAAK,kBAAL,GAA0B,KAAK,GAAL,CAAS,SAAS,KAAK,kBAAL,EAAyB,EAAlC,CAAT,EAAgD,KAAK,OAAL,CAA1E,CAJK;AAKL,eAAK,cAAL,GAAsB,6BAA6B,KAAK,cAAL,CAAnD,CALK;AAML,eAAK,WAAL,GAAmB,KAAK,iBAAL,EAAnB,CANK;;;AArBI,+BA8BX,uCAAc,MAAM;AAClB,eAAK,YAAL,GAAoB,IAApB,CADkB;AAElB,eAAK,WAAL,GAAmB,KAAK,iBAAL,EAAnB,CAFkB;AAGlB,+BAAqB,KAAK,OAAL,EAAc,cAAnC,EAAmD,KAAK,YAAL,CAAnD,CAHkB;;;AA9BT,+BAoCX,uCAAe;AACb,cAAI,KAAK,YAAL,GAAoB,CAApB,EAAuB;AACzB,iBAAK,aAAL,CAAmB,CAAnB,EADyB;WAA3B;;;AArCS,+BA0CX,qCAAc;AACZ,cAAI,KAAK,YAAL,GAAoB,KAAK,OAAL,EAAc;AACpC,iBAAK,aAAL,CAAmB,KAAK,OAAL,CAAnB,CADoC;WAAtC;;;AA3CS,+BAgDX,6CAAkB;AAChB,cAAI,KAAK,YAAL,GAAoB,CAApB,EAAuB;AACzB,iBAAK,aAAL,CAAmB,KAAK,YAAL,GAAoB,CAApB,CAAnB,CADyB;WAA3B;;;AAjDS,+BAsDX,qCAAc;AACZ,cAAI,KAAK,YAAL,GAAoB,KAAK,OAAL,EAAc;AACpC,iBAAK,aAAL,CAAmB,KAAK,YAAL,GAAoB,CAApB,CAAnB,CADoC;WAAtC;;;AAvDS,+BA4DX,2CAAiB;AACf,eAAK,aAAL,CAAmB,CAAnB,EADe;;;AA5DN,+BAgEX,iEAA4B;AAC1B,eAAK,WAAL,GAAmB,KAAK,iBAAL,EAAnB,CAD0B;;;AAhEjB,+BAoEX,iDAAoB;AAClB,cAAI,gBAAgB,SAAS,KAAK,kBAAL,EAAyB,EAAlC,CAAhB,CADc;AAElB,cAAI,WAAW,SAAU,gBAAgB,CAAhB,EAAoB,EAA9B,CAAX,CAFc;AAGlB,cAAI,QAAQ,KAAK,GAAL,CAAS,KAAK,YAAL,GAAoB,QAApB,EAA8B,CAAvC,CAAR,CAHc;AAIlB,cAAI,MAAM,KAAK,GAAL,CAAS,QAAQ,aAAR,EAAuB,KAAK,OAAL,CAAtC,CAJc;;AAMlB,cAAI,OAAO,EAAP,CANc;AAOlB,eAAK,IAAI,IAAI,KAAJ,EAAW,IAAI,GAAJ,EAAS,GAA7B,EAAkC;AAChC,iBAAK,IAAL,CAAU,CAAV,EADgC;WAAlC;;AAIA,iBAAO,IAAP,CAXkB;;;eApET;;;;iBAGO;;;;;iBAGL;;;;;iBAGW;;;;;iBAGP;;;;;iBACa;;;;;iBACD;;;;;iBACC","file":"pagination/pagination.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customElement } from 'aurelia-templating';\r\nimport { bindingMode } from 'aurelia-binding';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { fireMaterializeEvent } from '../common/events';\r\nimport { getBooleanFromAttributeValue } from '../common/attributes';\r\n\r\n\r\n@customElement('md-pagination')\r\n@inject(Element)\r\nexport class MdPagination {\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.twoWay\r\n  }) mdActivePage = 1;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneWay\r\n  }) mdPages = 5;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneWay\r\n  }) mdVisiblePageLinks = 15;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneWay\r\n  }) mdPageLinks = [];\r\n  @bindable() mdShowFirstLast = true;\r\n  @bindable() mdShowPrevNext = true;\r\n  @bindable() mdShowPageLinks = true;\r\n\r\n  constructor(element) {\r\n    this.element = element;\r\n  }\r\n\r\n  bind() {\r\n    // attached() throws unhandled exceptions\r\n    this.mdPages = parseInt(this.mdPages, 10);\r\n    // We don't want mdVisiblePageLinks to be greater than mdPages\r\n    this.mdVisiblePageLinks = Math.min(parseInt(this.mdVisiblePageLinks, 10), this.mdPages);\r\n    this.mdShowPrevNext = getBooleanFromAttributeValue(this.mdShowPrevNext);\r\n    this.mdPageLinks = this.generatePageLinks();\r\n  }\r\n\r\n  setActivePage(page) {\r\n    this.mdActivePage = page;\r\n    this.mdPageLinks = this.generatePageLinks();\r\n    fireMaterializeEvent(this.element, 'page-changed', this.mdActivePage);\r\n  }\r\n\r\n  setFirstPage() {\r\n    if (this.mdActivePage > 1) {\r\n      this.setActivePage(1);\r\n    }\r\n  }\r\n\r\n  setLastPage() {\r\n    if (this.mdActivePage < this.mdPages) {\r\n      this.setActivePage(this.mdPages);\r\n    }\r\n  }\r\n\r\n  setPreviousPage() {\r\n    if (this.mdActivePage > 1) {\r\n      this.setActivePage(this.mdActivePage - 1);\r\n    }\r\n  }\r\n\r\n  setNextPage() {\r\n    if (this.mdActivePage < this.mdPages) {\r\n      this.setActivePage(this.mdActivePage + 1);\r\n    }\r\n  }\r\n\r\n  mdPagesChanged() {\r\n    this.setActivePage(1);\r\n  }\r\n\r\n  mdVisiblePageLinksChanged() {\r\n    this.mdPageLinks = this.generatePageLinks();\r\n  }\r\n\r\n  generatePageLinks() {\r\n    let numberOfLinks = parseInt(this.mdVisiblePageLinks, 10);\r\n    let midPoint = parseInt((numberOfLinks / 2), 10);\r\n    let start = Math.max(this.mdActivePage - midPoint, 0);\r\n    let end = Math.min(start + numberOfLinks, this.mdPages);\r\n\r\n    let list = [];\r\n    for (let i = start; i < end; i++) {\r\n      list.push(i);\r\n    }\r\n\r\n    return list;\r\n  }\r\n}\r\n"]}