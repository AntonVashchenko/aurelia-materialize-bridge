{"version":3,"sources":["badge/badge.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS;AAAU;;AACV;;AACA;;AACA;;;yBAII,kBAFZ,gBAAgB,UAAhB,WACA,OAAO,OAAP,WAEE;AAED,yBAAY,OAAZ,EAAqB;;;;;AACnB,eAAK,OAAL,GAAe,OAAf,CADmB;AAEnB,eAAK,gBAAL,GAAwB,IAAI,gBAAJ,CAAqB,KAAK,OAAL,CAA7C,CAFmB;SAArB;;0BAKA,+BAAW;AACT,cAAI,UAAU,CACZ,OADY,CAAV,CADK;AAIT,cAAI,6BAA6B,KAAK,KAAL,CAAjC,EAA8C;AAC5C,oBAAQ,IAAR,CAAa,KAAb,EAD4C;WAA9C;AAGA,eAAK,gBAAL,CAAsB,UAAtB,CAAiC,OAAjC,EAPS;;;0BAUX,+BAAW;AACT,eAAK,gBAAL,CAAsB,aAAtB,CAAoC,CAAC,OAAD,EAAU,KAAV,CAApC,EADS;;;;;;;iBAjBS","file":"badge/badge.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customAttribute } from 'aurelia-templating';\nimport { inject } from 'aurelia-dependency-injection';\nimport { AttributeManager } from '../common/attributeManager';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\n\n@customAttribute('md-badge')\n@inject(Element)\nexport class MdBadge {\n  @bindable() isNew = false;\n\n  constructor(element) {\n    this.element = element;\n    this.attributeManager = new AttributeManager(this.element);\n  }\n\n  attached() {\n    let classes = [\n      'badge'\n    ];\n    if (getBooleanFromAttributeValue(this.isNew)) {\n      classes.push('new');\n    }\n    this.attributeManager.addClasses(classes);\n  }\n\n  detached() {\n    this.attributeManager.removeClasses(['badge', 'new']);\n  }\n}\n"]}