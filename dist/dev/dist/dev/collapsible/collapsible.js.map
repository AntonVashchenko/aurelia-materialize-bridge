{"version":3,"sources":["collapsible/collapsible.js"],"names":["bindable","customAttribute","inject","getBooleanFromAttributeValue","AttributeManager","MdCollapsible","name","defaultValue","Element","element","attributeManager","attached","addClasses","popout","refresh","detached","removeClasses","removeAttributes","accordion","addAttributes","$","collapsible","accordionChanged"],"mappings":";;;;;;;;;;;;;;;AAASA,c,sBAAAA,Q;AAAUC,qB,sBAAAA,e;;AACVC,Y,+BAAAA,M;;AACAC,kC,qBAAAA,4B;;AACAC,sB,2BAAAA,gB;;;+BAOIC,a,WALZJ,gBAAgB,gBAAhB,C,UACAD,SAAS,EAAEM,MAAM,WAAR,EAAqBC,cAAc,KAAnC,EAAT,C,UACAP,SAAS,EAAEM,MAAM,QAAR,EAAkBC,cAAc,KAAhC,EAAT,C,UACAL,OAAOM,OAAP,C;AAGC,+BAAYC,OAAZ,EAAqB;AAAA;;AACnB,eAAKA,OAAL,GAAeA,OAAf;AACA,eAAKC,gBAAL,GAAwB,IAAIN,gBAAJ,CAAqB,KAAKK,OAA1B,CAAxB;AACD;;gCAEDE,Q,uBAAW;AACT,eAAKD,gBAAL,CAAsBE,UAAtB,CAAiC,aAAjC;AACA,cAAIT,6BAA6B,KAAKU,MAAlC,CAAJ,EAA+C;AAC7C,iBAAKH,gBAAL,CAAsBE,UAAtB,CAAiC,QAAjC;AACD;AACD,eAAKE,OAAL;AACD,S;;gCAEDC,Q,uBAAW;AACT,eAAKL,gBAAL,CAAsBM,aAAtB,CAAoC,CAAC,aAAD,EAAgB,QAAhB,CAApC;AACA,eAAKN,gBAAL,CAAsBO,gBAAtB,CAAuC,CAAC,kBAAD,CAAvC;AACD,S;;gCAEDH,O,sBAAU;AACR,cAAII,YAAYf,6BAA6B,KAAKe,SAAlC,CAAhB;AACA,cAAIA,SAAJ,EAAe;AACb,iBAAKR,gBAAL,CAAsBS,aAAtB,CAAoC,EAAE,oBAAoB,WAAtB,EAApC;AACD,WAFD,MAEO;AACL,iBAAKT,gBAAL,CAAsBS,aAAtB,CAAoC,EAAE,oBAAoB,YAAtB,EAApC;AACD;;AAEDC,YAAE,KAAKX,OAAP,EAAgBY,WAAhB,CAA4B;AAC1BH;AAD0B,WAA5B;AAGD,S;;gCAEDI,gB,+BAAmB;AACjB,eAAKR,OAAL;AACD,S","file":"../../../collapsible/collapsible.js","sourcesContent":["import { bindable, customAttribute } from 'aurelia-templating';\nimport { inject } from 'aurelia-dependency-injection';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\nimport { AttributeManager } from '../common/attributeManager';\n\n@customAttribute('md-collapsible')\n@bindable({ name: 'accordion', defaultValue: false })\n@bindable({ name: 'popout', defaultValue: false })\n@inject(Element)\n\nexport class MdCollapsible {\n  constructor(element) {\n    this.element = element;\n    this.attributeManager = new AttributeManager(this.element);\n  }\n\n  attached() {\n    this.attributeManager.addClasses('collapsible');\n    if (getBooleanFromAttributeValue(this.popout)) {\n      this.attributeManager.addClasses('popout');\n    }\n    this.refresh();\n  }\n\n  detached() {\n    this.attributeManager.removeClasses(['collapsible', 'popout']);\n    this.attributeManager.removeAttributes(['data-collapsible']);\n  }\n\n  refresh() {\n    let accordion = getBooleanFromAttributeValue(this.accordion);\n    if (accordion) {\n      this.attributeManager.addAttributes({ 'data-collapsible': 'accordion' });\n    } else {\n      this.attributeManager.addAttributes({ 'data-collapsible': 'expandable' });\n    }\n\n    $(this.element).collapsible({\n      accordion\n    });\n  }\n\n  accordionChanged() {\n    this.refresh();\n  }\n}\n"]}