{"version":3,"sources":["collapsible/collapsible.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAS,c,sBAAA,Q;AAAU,qB,sBAAA,e;;AACV,Y,+BAAA,M;;AACA,kC,qBAAA,4B;;AACA,sB,2BAAA,gB;;;+BAOI,a,WALZ,gBAAgB,gBAAhB,C,UACA,SAAS,EAAE,MAAM,WAAR,EAAqB,cAAc,KAAnC,EAAT,C,UACA,SAAS,EAAE,MAAM,QAAR,EAAkB,cAAc,KAAhC,EAAT,C,UACA,OAAO,OAAP,C;AAGC,+BAAY,OAAZ,EAAqB;AAAA;;AACnB,eAAK,OAAL,GAAe,OAAf;AACA,eAAK,gBAAL,GAAwB,IAAI,gBAAJ,CAAqB,KAAK,OAA1B,CAAxB;AACD;;gCAED,Q,uBAAW;AACT,eAAK,gBAAL,CAAsB,UAAtB,CAAiC,aAAjC;AACA,cAAI,6BAA6B,KAAK,MAAlC,CAAJ,EAA+C;AAC7C,iBAAK,gBAAL,CAAsB,UAAtB,CAAiC,QAAjC;AACD;AACD,eAAK,OAAL;AACD,S;;gCAED,Q,uBAAW;AACT,eAAK,gBAAL,CAAsB,aAAtB,CAAoC,CAAC,aAAD,EAAgB,QAAhB,CAApC;AACA,eAAK,gBAAL,CAAsB,gBAAtB,CAAuC,CAAC,kBAAD,CAAvC;AACD,S;;gCAED,O,sBAAU;AACR,cAAI,YAAY,6BAA6B,KAAK,SAAlC,CAAhB;AACA,cAAI,SAAJ,EAAe;AACb,iBAAK,gBAAL,CAAsB,aAAtB,CAAoC,EAAE,oBAAoB,WAAtB,EAApC;AACD,WAFD,MAEO;AACL,iBAAK,gBAAL,CAAsB,aAAtB,CAAoC,EAAE,oBAAoB,YAAtB,EAApC;AACD;;AAED,YAAE,KAAK,OAAP,EAAgB,WAAhB,CAA4B;AAC1B;AAD0B,WAA5B;AAGD,S;;gCAED,gB,+BAAmB;AACjB,eAAK,OAAL;AACD,S","file":"collapsible/collapsible.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customAttribute } from 'aurelia-templating';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { getBooleanFromAttributeValue } from '../common/attributes';\r\nimport { AttributeManager } from '../common/attributeManager';\r\n\r\n@customAttribute('md-collapsible')\r\n@bindable({ name: 'accordion', defaultValue: false })\r\n@bindable({ name: 'popout', defaultValue: false })\r\n@inject(Element)\r\n\r\nexport class MdCollapsible {\r\n  constructor(element) {\r\n    this.element = element;\r\n    this.attributeManager = new AttributeManager(this.element);\r\n  }\r\n\r\n  attached() {\r\n    this.attributeManager.addClasses('collapsible');\r\n    if (getBooleanFromAttributeValue(this.popout)) {\r\n      this.attributeManager.addClasses('popout');\r\n    }\r\n    this.refresh();\r\n  }\r\n\r\n  detached() {\r\n    this.attributeManager.removeClasses(['collapsible', 'popout']);\r\n    this.attributeManager.removeAttributes(['data-collapsible']);\r\n  }\r\n\r\n  refresh() {\r\n    let accordion = getBooleanFromAttributeValue(this.accordion);\r\n    if (accordion) {\r\n      this.attributeManager.addAttributes({ 'data-collapsible': 'accordion' });\r\n    } else {\r\n      this.attributeManager.addAttributes({ 'data-collapsible': 'expandable' });\r\n    }\r\n\r\n    $(this.element).collapsible({\r\n      accordion\r\n    });\r\n  }\r\n\r\n  accordionChanged() {\r\n    this.refresh();\r\n  }\r\n}\r\n"]}