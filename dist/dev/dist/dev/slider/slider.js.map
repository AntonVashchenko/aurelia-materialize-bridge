{"version":3,"sources":["slider/slider.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS,c,sBAAA,Q;AAAU,mB,sBAAA,a;AAAe,gB,sBAAA,U;;AACzB,iB,mBAAA,W;;AACA,Y,+BAAA,M;;AACA,kC,qBAAA,4B;;AACA,e,mBAAA,S;;;0BAYI,Q,WAVZ,cAAc,WAAd,C,UACA,OAAO,OAAP,C,UACA,0J,UASE,SAAS,EAAE,oBAAoB,YAAY,OAAlC,EAAT,C,UACA,SAAS,EAAE,oBAAoB,YAAY,OAAlC,EAAT,C,UACA,U,UACA,SAAS,EAAE,oBAAoB,YAAY,OAAlC,EAAT,C,UACA,SAAS,EAAE,oBAAoB,YAAY,OAAlC,EAAT,C;AAED,0BAAY,OAAZ,EAAqB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACnB,eAAK,OAAL,GAAe,OAAf;AACA,eAAK,GAAL,GAAW,UAAU,WAAV,CAAX;AACD;;2BAED,Q,uBAAW;AACT,cAAI,6BAA6B,KAAK,eAAlC,CAAJ,EAAwD;AACtD,iBAAK,OAAL,CAAa,SAAb,CAAuB,GAAvB,CAA2B,YAA3B;AACD;AACD,eAAK,OAAL;AACD,S;;2BAED,K,oBAAQ;AACN,YAAE,KAAK,OAAP,EAAgB,MAAhB,CAAuB,OAAvB;AACD,S;;2BAED,K,oBAAQ;AACN,YAAE,KAAK,OAAP,EAAgB,MAAhB,CAAuB,OAAvB;AACD,S;;2BAED,I,mBAAO;AACL,YAAE,KAAK,OAAP,EAAgB,MAAhB,CAAuB,MAAvB;AACD,S;;2BAED,I,mBAAO;AACL,YAAE,KAAK,OAAP,EAAgB,MAAhB,CAAuB,MAAvB;AACD,S;;2BAED,O,sBAAU;AACR,cAAI,UAAU;AACZ,oBAAQ,SAAS,KAAK,QAAd,EAAwB,EAAxB,CADI;AAEZ,wBAAY,6BAA6B,KAAK,YAAlC,CAFA;AAGZ,sBAAU,SAAS,KAAK,UAAd,EAA0B,EAA1B,CAHE;AAIZ,wBAAY,SAAS,KAAK,YAAd,EAA4B,EAA5B;AAJA,WAAd;AAMA,eAAK,GAAL,CAAS,KAAT,CAAe,4BAAf,EAA6C,OAA7C;AACA,YAAE,KAAK,OAAP,EAAgB,MAAhB,CAAuB,OAAvB;AACD,S;;2BAED,mB,kCAAsB;AACpB,eAAK,OAAL;AACD,S;;;;;;iBA/CwE,K;;;;;iBACP,G;;;;;iBACvC,I;;;;;iBACyC,I;;;;;iBACE,G","file":"slider/slider.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customElement, inlineView } from 'aurelia-templating';\r\nimport { bindingMode } from 'aurelia-binding';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { getBooleanFromAttributeValue } from '../common/attributes';\r\nimport { getLogger } from 'aurelia-logging';\r\n\r\n@customElement('md-slider')\r\n@inject(Element)\r\n@inlineView(`\r\n  <template class=\"slider\">\r\n  <require from=\"./slider.css\"></require>\r\n  <ul class=\"slides\">\r\n    <slot></slot>\r\n  </ul>\r\n  </template>\r\n`)\r\nexport class MdSlider {\r\n  @bindable({ defaultBindingMode: bindingMode.oneTime }) mdFillContainer = false;\r\n  @bindable({ defaultBindingMode: bindingMode.oneTime }) mdHeight = 400;\r\n  @bindable() mdIndicators = true;\r\n  @bindable({ defaultBindingMode: bindingMode.oneTime }) mdInterval = 6000;\r\n  @bindable({ defaultBindingMode: bindingMode.oneTime }) mdTransition = 500;\r\n\r\n  constructor(element) {\r\n    this.element = element;\r\n    this.log = getLogger('md-slider');\r\n  }\r\n\r\n  attached() {\r\n    if (getBooleanFromAttributeValue(this.mdFillContainer)) {\r\n      this.element.classList.add('fullscreen');\r\n    }\r\n    this.refresh();\r\n  }\r\n\r\n  pause() {\r\n    $(this.element).slider('pause');\r\n  }\r\n\r\n  start() {\r\n    $(this.element).slider('start');\r\n  }\r\n\r\n  next() {\r\n    $(this.element).slider('next');\r\n  }\r\n\r\n  prev() {\r\n    $(this.element).slider('prev');\r\n  }\r\n\r\n  refresh() {\r\n    let options = {\r\n      height: parseInt(this.mdHeight, 10),\r\n      indicators: getBooleanFromAttributeValue(this.mdIndicators),\r\n      interval: parseInt(this.mdInterval, 10),\r\n      transition: parseInt(this.mdTransition, 10)\r\n    };\r\n    this.log.debug('refreshing slider, params:', options);\r\n    $(this.element).slider(options);\r\n  }\r\n\r\n  mdIndicatorsChanged() {\r\n    this.refresh();\r\n  }\r\n\r\n  // commented since that leads to strange effects\r\n  // mdIntervalChanged() {\r\n  //   this.refresh();\r\n  // }\r\n  //\r\n  // mdTransitionChanged() {\r\n  //   this.refresh();\r\n  // }\r\n}\r\n"]}