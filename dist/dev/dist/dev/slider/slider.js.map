{"version":3,"sources":["slider/slider.js"],"names":[],"mappings":";;;iFAca,QAAQ;;;;;;;;;;oCAdZ,QAAQ;yCAAE,aAAa;sCAAE,UAAU;;2CACnC,MAAM;;uDACN,4BAA4B;;;AAYxB,cAAQ;;;8BAAR,QAAQ;;uBAClB,QAAQ,EAAE;;mBAAmB,KAAK;;;;;uBAClC,QAAQ,EAAE;;mBAAY,GAAG;;;;;uBACzB,QAAQ,EAAE;;mBAAgB,IAAI;;;;;uBAC9B,QAAQ,EAAE;;mBAAc,IAAI;;;;;uBAC5B,QAAQ,EAAE;;mBAAgB,GAAG;;;;;AAEnB,iBAPA,QAAQ,CAOP,OAAO,EAAE;;;;;;;;;;;;;AACnB,cAAI,CAAC,OAAO,GAAG,OAAO,CAAC;SACxB;;AATU,gBAAQ,WAWnB,QAAQ,GAAA,oBAAG;AACT,cAAI,4BAA4B,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;AACtD,gBAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;WAC1C;;AAED,WAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;AACrB,kBAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;AACnC,sBAAU,EAAE,4BAA4B,CAAC,IAAI,CAAC,YAAY,CAAC;AAC3D,oBAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC;AACvC,sBAAU,EAAE,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC;WAC5C,CAAC,CAAC;SACJ;;wBAtBU,QAAQ;AAAR,gBAAQ,GARpB,UAAU,kKAOT,CACW,QAAQ,KAAR,QAAQ;AAAR,gBAAQ,GATpB,MAAM,CAAC,OAAO,CAAC,CASH,QAAQ,KAAR,QAAQ;AAAR,gBAAQ,GAVpB,aAAa,CAAC,WAAW,CAAC,CAUd,QAAQ,KAAR,QAAQ;eAAR,QAAQ","file":"slider/slider.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customElement, inlineView } from 'aurelia-templating';\nimport { inject } from 'aurelia-dependency-injection';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\n\n@customElement('md-slider')\n@inject(Element)\n@inlineView(`\n  <template class=\"slider\">\n  <require from=\"./slider.css\"></require>\n  <ul class=\"slides\">\n    <content select=\"li\"></content>\n  </ul>\n  </template>\n`)\nexport class MdSlider {\n  @bindable() mdFillContainer = false;\n  @bindable() mdHeight = 400;\n  @bindable() mdIndicators = true;\n  @bindable() mdInterval = 6000;\n  @bindable() mdTransition = 500;\n\n  constructor(element) {\n    this.element = element;\n  }\n\n  attached() {\n    if (getBooleanFromAttributeValue(this.mdFillContainer)) {\n      this.element.classList.add('fullscreen');\n    }\n    // $(this.element).slider({full_width: true});\n    $(this.element).slider({\n      height: parseInt(this.mdHeight, 10),\n      indicators: getBooleanFromAttributeValue(this.mdIndicators),\n      interval: parseInt(this.mdInterval, 10),\n      transition: parseInt(this.mdTransition, 10)\n    });\n  }\n}\n"]}