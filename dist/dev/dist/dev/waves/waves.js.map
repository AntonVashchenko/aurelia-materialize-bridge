{"version":3,"sources":["waves/waves.js"],"names":[],"mappings":";;;sGAQa,OAAO;;;;;;;;;;oCARX,QAAQ;2CAAE,eAAe;;oCACzB,WAAW;;2CACX,MAAM;;iDACN,gBAAgB;;uDAChB,4BAA4B;;;AAIxB,aAAO;;;8BAAP,OAAO;;uBACjB,QAAQ,CAAC;AACR,8BAAkB,EAAE,WAAW,CAAC,OAAO;WACxC,CAAC;;mBAAS,KAAK;;;;;uBACf,QAAQ,CAAC;AACR,8BAAkB,EAAE,WAAW,CAAC,OAAO;WACxC,CAAC;;mBAAU,KAAK;;;;;uBAChB,QAAQ,CAAC;AACR,8BAAkB,EAAE,WAAW,CAAC,OAAO;WACxC,CAAC;;;;;AACS,iBAVA,OAAO,CAUN,OAAO,EAAE;;;;;;;;;AACnB,cAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,cAAI,CAAC,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC5D;;AAbU,eAAO,WAelB,QAAQ,GAAA,oBAAG;AACT,cAAI,OAAO,GAAG,CAAC,cAAc,CAAC,CAAC;AAC/B,cAAI,4BAA4B,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AAC5C,mBAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;WAC7B;AACD,cAAI,4BAA4B,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;AAC7C,mBAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;WAC9B;AACD,cAAI,IAAI,CAAC,KAAK,EAAE;AACd,mBAAO,CAAC,IAAI,YAAU,IAAI,CAAC,KAAK,CAAG,CAAC;WACrC;;AAED,cAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAC1C,eAAK,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC5B;;AA7BU,eAAO,WA+BlB,QAAQ,GAAA,oBAAG;AACT,cAAI,OAAO,GAAG,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;AAC9C,cAAI,IAAI,CAAC,KAAK,EAAE;AACd,mBAAO,CAAC,IAAI,YAAU,IAAI,CAAC,KAAK,CAAG,CAAC;WACrC;;AAED,cAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;SAC9C;;uBAtCU,OAAO;AAAP,eAAO,GADnB,MAAM,CAAC,OAAO,CAAC,CACH,OAAO,KAAP,OAAO;AAAP,eAAO,GAFnB,eAAe,CAAC,UAAU,CAAC,CAEf,OAAO,KAAP,OAAO;eAAP,OAAO","file":"waves/waves.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customAttribute } from 'aurelia-templating';\r\nimport { bindingMode } from 'aurelia-binding';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { AttributeManager } from '../common/attributeManager';\r\nimport { getBooleanFromAttributeValue } from '../common/attributes';\r\n\r\n@customAttribute('md-waves')\r\n@inject(Element)\r\nexport class MdWaves {\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) block = false;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) circle = false;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) color;\r\n  constructor(element) {\r\n    this.element = element;\r\n    this.attributeManager = new AttributeManager(this.element);\r\n  }\r\n\r\n  attached() {\r\n    let classes = ['waves-effect'];\r\n    if (getBooleanFromAttributeValue(this.block)) {\r\n      classes.push('waves-block');\r\n    }\r\n    if (getBooleanFromAttributeValue(this.circle)) {\r\n      classes.push('waves-circle');\r\n    }\r\n    if (this.color) {\r\n      classes.push(`waves-${this.color}`);\r\n    }\r\n\r\n    this.attributeManager.addClasses(classes);\r\n    Waves.attach(this.element);\r\n  }\r\n\r\n  detached() {\r\n    let classes = ['waves-effect', 'waves-block'];\r\n    if (this.color) {\r\n      classes.push(`waves-${this.color}`);\r\n    }\r\n\r\n    this.attributeManager.removeClasses(classes);\r\n  }\r\n}\r\n"]}