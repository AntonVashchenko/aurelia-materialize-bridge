{"version":3,"sources":["waves/waves.js"],"names":[],"mappings":";;;sGAQa,OAAO;;;;;;;;;;oCARX,QAAQ;2CAAE,eAAe;;oCACzB,WAAW;;2CACX,MAAM;;iDACN,gBAAgB;;uDAChB,4BAA4B;;;AAIxB,aAAO;;;8BAAP,OAAO;;uBACjB,QAAQ,CAAC;AACR,8BAAkB,EAAE,WAAW,CAAC,OAAO;WACxC,CAAC;;mBAAS,KAAK;;;;;uBACf,QAAQ,CAAC;AACR,8BAAkB,EAAE,WAAW,CAAC,OAAO;WACxC,CAAC;;;;;AACS,iBAPA,OAAO,CAON,OAAO,EAAE;;;;;;;AACnB,cAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,cAAI,CAAC,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC5D;;AAVU,eAAO,WAYlB,QAAQ,GAAA,oBAAG;AACT,cAAI,OAAO,GAAG,CAAC,cAAc,CAAC,CAAC;AAC/B,cAAI,4BAA4B,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AAC5C,mBAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;WAC7B;AACD,cAAI,IAAI,CAAC,KAAK,EAAE;AACd,mBAAO,CAAC,IAAI,YAAU,IAAI,CAAC,KAAK,CAAG,CAAC;WACrC;;AAED,cAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAC1C,eAAK,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC5B;;AAvBU,eAAO,WAyBlB,QAAQ,GAAA,oBAAG;AACT,cAAI,OAAO,GAAG,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;AAC9C,cAAI,IAAI,CAAC,KAAK,EAAE;AACd,mBAAO,CAAC,IAAI,YAAU,IAAI,CAAC,KAAK,CAAG,CAAC;WACrC;;AAED,cAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;SAC9C;;uBAhCU,OAAO;AAAP,eAAO,GADnB,MAAM,CAAC,OAAO,CAAC,CACH,OAAO,KAAP,OAAO;AAAP,eAAO,GAFnB,eAAe,CAAC,UAAU,CAAC,CAEf,OAAO,KAAP,OAAO;eAAP,OAAO","file":"waves/waves.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customAttribute } from 'aurelia-templating';\nimport { bindingMode } from 'aurelia-binding';\nimport { inject } from 'aurelia-dependency-injection';\nimport { AttributeManager } from '../common/attributeManager';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\n\n@customAttribute('md-waves')\n@inject(Element)\nexport class MdWaves {\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) block = false;\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) color;\n  constructor(element) {\n    this.element = element;\n    this.attributeManager = new AttributeManager(this.element);\n  }\n\n  attached() {\n    let classes = ['waves-effect'];\n    if (getBooleanFromAttributeValue(this.block)) {\n      classes.push('waves-block');\n    }\n    if (this.color) {\n      classes.push(`waves-${this.color}`);\n    }\n\n    this.attributeManager.addClasses(classes);\n    Waves.attach(this.element);\n  }\n\n  detached() {\n    let classes = ['waves-effect', 'waves-block'];\n    if (this.color) {\n      classes.push(`waves-${this.color}`);\n    }\n\n    this.attributeManager.removeClasses(classes);\n  }\n}\n"]}