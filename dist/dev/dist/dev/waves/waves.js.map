{"version":3,"sources":["waves/waves.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS,c,sBAAA,Q;AAAU,qB,sBAAA,e;;AACV,iB,mBAAA,W;;AACA,Y,+BAAA,M;;AACA,sB,2BAAA,gB;;AACA,kC,qBAAA,4B;;;yBAII,O,WAFZ,gBAAgB,UAAhB,C,UACA,OAAO,OAAP,C,UAEE,SAAS;AACR,4BAAoB,YAAY;AADxB,OAAT,C,UAGA,SAAS;AACR,4BAAoB,YAAY;AADxB,OAAT,C,UAGA,SAAS;AACR,4BAAoB,YAAY;AADxB,OAAT,C;AAGD,yBAAY,OAAZ,EAAqB;AAAA;;AAAA;;AAAA;;AAAA;;AACnB,eAAK,OAAL,GAAe,OAAf;AACA,eAAK,gBAAL,GAAwB,IAAI,gBAAJ,CAAqB,KAAK,OAA1B,CAAxB;AACD;;0BAED,Q,uBAAW;AACT,cAAI,UAAU,CAAC,cAAD,CAAd;AACA,cAAI,6BAA6B,KAAK,KAAlC,CAAJ,EAA8C;AAC5C,oBAAQ,IAAR,CAAa,aAAb;AACD;AACD,cAAI,6BAA6B,KAAK,MAAlC,CAAJ,EAA+C;AAC7C,oBAAQ,IAAR,CAAa,cAAb;AACD;AACD,cAAI,KAAK,KAAT,EAAgB;AACd,oBAAQ,IAAR,YAAsB,KAAK,KAA3B;AACD;;AAED,eAAK,gBAAL,CAAsB,UAAtB,CAAiC,OAAjC;AACA,gBAAM,MAAN,CAAa,KAAK,OAAlB;AACD,S;;0BAED,Q,uBAAW;AACT,cAAI,UAAU,CAAC,cAAD,EAAiB,aAAjB,CAAd;AACA,cAAI,KAAK,KAAT,EAAgB;AACd,oBAAQ,IAAR,YAAsB,KAAK,KAA3B;AACD;;AAED,eAAK,gBAAL,CAAsB,aAAtB,CAAoC,OAApC;AACD,S;;;;;;iBAnCU,K;;;;;iBAGC,K","file":"waves/waves.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customAttribute } from 'aurelia-templating';\r\nimport { bindingMode } from 'aurelia-binding';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { AttributeManager } from '../common/attributeManager';\r\nimport { getBooleanFromAttributeValue } from '../common/attributes';\r\n\r\n@customAttribute('md-waves')\r\n@inject(Element)\r\nexport class MdWaves {\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) block = false;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) circle = false;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) color;\r\n  constructor(element) {\r\n    this.element = element;\r\n    this.attributeManager = new AttributeManager(this.element);\r\n  }\r\n\r\n  attached() {\r\n    let classes = ['waves-effect'];\r\n    if (getBooleanFromAttributeValue(this.block)) {\r\n      classes.push('waves-block');\r\n    }\r\n    if (getBooleanFromAttributeValue(this.circle)) {\r\n      classes.push('waves-circle');\r\n    }\r\n    if (this.color) {\r\n      classes.push(`waves-${this.color}`);\r\n    }\r\n\r\n    this.attributeManager.addClasses(classes);\r\n    Waves.attach(this.element);\r\n  }\r\n\r\n  detached() {\r\n    let classes = ['waves-effect', 'waves-block'];\r\n    if (this.color) {\r\n      classes.push(`waves-${this.color}`);\r\n    }\r\n\r\n    this.attributeManager.removeClasses(classes);\r\n  }\r\n}\r\n"]}