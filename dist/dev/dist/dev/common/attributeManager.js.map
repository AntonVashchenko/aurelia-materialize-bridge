{"version":3,"sources":["common/attributeManager.js"],"names":[],"mappings":";;;MAOa,gBAAgB;;;;;;;AAAhB,sBAAgB;AAQhB,iBARA,gBAAgB,CAQf,OAAO,EAAE;gCARV,gBAAgB;;eAC3B,aAAa,GAAG,CACd,QAAQ,EACR,SAAS,CACV;eACD,YAAY,GAAG,EAAE;eACjB,eAAe,GAAG,EAAE;;AAGlB,cAAI,CAAC,OAAO,GAAG,OAAO,CAAC;SACxB;;AAVU,wBAAgB,WAY3B,aAAa,GAAA,uBAAC,KAAK,EAAE;;;AACnB,cAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9B,cAAI,CAAC,OAAO,CAAC,UAAA,CAAC,EAAI;AAChB,gBAAI,CAAC,MAAK,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE;AACjC,oBAAK,eAAe,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACnC,oBAAK,OAAO,CAAC,YAAY,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;aACxC,MAAM,IAAI,MAAK,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,EAAE;AACpD,oBAAK,OAAO,CAAC,YAAY,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;aACxC;WACF,CAAC,CAAC;SACJ;;AAtBU,wBAAgB,WAwB3B,gBAAgB,GAAA,0BAAC,KAAK,EAAE;;;AACtB,cAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AAC7B,iBAAK,GAAG,CAAC,KAAK,CAAC,CAAC;WACjB;AACD,eAAK,CAAC,OAAO,CAAC,UAAA,CAAC,EAAI;AACjB,gBAAI,OAAK,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAK,eAAe,CAAC,CAAC,CAAC,EAAE;AAC7D,qBAAK,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;AAChC,qBAAK,eAAe,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AAC/B,qBAAO,OAAK,eAAe,CAAC,CAAC,CAAC,CAAC;aAChC;WACF,CAAC,CAAC;SACJ;;AAnCU,wBAAgB,WAqC3B,UAAU,GAAA,oBAAC,OAAO,EAAE;;;AAClB,cAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;AAC/B,mBAAO,GAAG,CAAC,OAAO,CAAC,CAAC;WACrB;AACD,iBAAO,CAAC,OAAO,CAAC,UAAA,CAAC,EAAI;AACnB,gBAAI,iBAAiB,GAAG,OAAK,aAAa,CAAC,MAAM,CAAC,UAAA,EAAE;qBAAI,OAAK,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC;aAAA,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;AACxG,gBAAI,OAAK,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,iBAAiB,EAAE,EAE5D,MAAM;AACL,oBAAI,CAAC,OAAK,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;AACvC,yBAAK,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1B,yBAAK,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC/B;eACF;WACF,CAAC,CAAC;SACJ;;AApDU,wBAAgB,WAsD3B,aAAa,GAAA,uBAAC,OAAO,EAAE;;;AACrB,cAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;AAC/B,mBAAO,GAAG,CAAC,OAAO,CAAC,CAAC;WACrB;AACD,iBAAO,CAAC,OAAO,CAAC,UAAA,CAAC,EAAI;AACnB,gBAAI,OAAK,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,OAAK,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;AAC3E,qBAAK,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACjC,qBAAK,YAAY,CAAC,MAAM,CAAC,OAAK,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aAC3D;WACF,CAAC,CAAC;SACJ;;eAhEU,gBAAgB","file":"common/attributeManager.js","sourceRoot":"/source/","sourcesContent":["/**\n * Adds css classes to a given element only if these classes are not already\n * present. Keeps a record of css classes which actually have been added.\n * This way, they can also be removed in a way which keeps the original classes\n * set by the user.\n * Most useful in attached() and detached() handlers.\n */\nexport class AttributeManager {\n  _colorClasses = [\n    'accent',\n    'primary'\n  ];\n  addedClasses = [];\n  addedAttributes = {};\n\n  constructor(element) {\n    this.element = element;\n  }\n\n  addAttributes(attrs) {\n    let keys = Object.keys(attrs);\n    keys.forEach(k => {\n      if (!this.element.getAttribute(k)) {\n        this.addedAttributes[k] = attrs[k];\n        this.element.setAttribute(k, attrs[k]);\n      } else if (this.element.getAttribute(k) !== attrs[k]) {\n        this.element.setAttribute(k, attrs[k]);\n      }\n    });\n  }\n\n  removeAttributes(attrs) {\n    if (typeof attrs === 'string') {\n      attrs = [attrs];\n    }\n    attrs.forEach(a => {\n      if (this.element.getAttribute(a) && !!this.addedAttributes[a]) {\n        this.element.removeAttribute(a);\n        this.addedAttributes[a] = null;\n        delete this.addedAttributes[a];\n      }\n    });\n  }\n\n  addClasses(classes) {\n    if (typeof classes === 'string') {\n      classes = [classes];\n    }\n    classes.forEach(c => {\n      let classListHasColor = this._colorClasses.filter(cc => this.element.classList.contains(cc)).length > 0;\n      if (this._colorClasses.indexOf(c) > -1 && classListHasColor) {\n        //\n      } else {\n        if (!this.element.classList.contains(c)) {\n          this.addedClasses.push(c);\n          this.element.classList.add(c);\n        }\n      }\n    });\n  }\n\n  removeClasses(classes) {\n    if (typeof classes === 'string') {\n      classes = [classes];\n    }\n    classes.forEach(c => {\n      if (this.element.classList.contains(c) && this.addedClasses.indexOf(c) > -1) {\n        this.element.classList.remove(c);\n        this.addedClasses.splice(this.addedClasses.indexOf(c), 1);\n      }\n    });\n  }\n}\n"]}