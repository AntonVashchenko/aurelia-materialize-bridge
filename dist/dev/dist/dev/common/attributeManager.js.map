{"version":3,"sources":["common/attributeManager.js"],"names":[],"mappings":";;;;;;;;;;;;;;kCAOa,gB;AAQX,kCAAY,OAAZ,EAAqB;AAAA;;AAAA,eAPrB,aAOqB,GAPL,CACd,QADc,EAEd,SAFc,CAOK;AAAA,eAHrB,YAGqB,GAHN,EAGM;AAAA,eAFrB,eAEqB,GAFH,EAEG;;AACnB,eAAK,OAAL,GAAe,OAAf;AACD;;mCAED,a,0BAAc,K,EAAO;AAAA;;AACnB,cAAI,OAAO,OAAO,IAAP,CAAY,KAAZ,CAAX;AACA,eAAK,OAAL,CAAa,aAAK;AAChB,gBAAI,CAAC,MAAK,OAAL,CAAa,YAAb,CAA0B,CAA1B,CAAL,EAAmC;AACjC,oBAAK,eAAL,CAAqB,CAArB,IAA0B,MAAM,CAAN,CAA1B;AACA,oBAAK,OAAL,CAAa,YAAb,CAA0B,CAA1B,EAA6B,MAAM,CAAN,CAA7B;AACD,aAHD,MAGO,IAAI,MAAK,OAAL,CAAa,YAAb,CAA0B,CAA1B,MAAiC,MAAM,CAAN,CAArC,EAA+C;AACpD,oBAAK,OAAL,CAAa,YAAb,CAA0B,CAA1B,EAA6B,MAAM,CAAN,CAA7B;AACD;AACF,WAPD;AAQD,S;;mCAED,gB,6BAAiB,K,EAAO;AAAA;;AACtB,cAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,oBAAQ,CAAC,KAAD,CAAR;AACD;AACD,gBAAM,OAAN,CAAc,aAAK;AACjB,gBAAI,OAAK,OAAL,CAAa,YAAb,CAA0B,CAA1B,KAAgC,CAAC,CAAC,OAAK,eAAL,CAAqB,CAArB,CAAtC,EAA+D;AAC7D,qBAAK,OAAL,CAAa,eAAb,CAA6B,CAA7B;AACA,qBAAK,eAAL,CAAqB,CAArB,IAA0B,IAA1B;AACA,qBAAO,OAAK,eAAL,CAAqB,CAArB,CAAP;AACD;AACF,WAND;AAOD,S;;mCAED,U,uBAAW,O,EAAS;AAAA;;AAClB,cAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,sBAAU,CAAC,OAAD,CAAV;AACD;AACD,kBAAQ,OAAR,CAAgB,aAAK;AACnB,gBAAI,oBAAoB,OAAK,aAAL,CAAmB,MAAnB,CAA0B;AAAA,qBAAM,OAAK,OAAL,CAAa,SAAb,CAAuB,QAAvB,CAAgC,EAAhC,CAAN;AAAA,aAA1B,EAAqE,MAArE,GAA8E,CAAtG;AACA,gBAAI,OAAK,aAAL,CAAmB,OAAnB,CAA2B,CAA3B,IAAgC,CAAC,CAAjC,IAAsC,iBAA1C,EAA6D,CAE5D,CAFD,MAEO;AACL,oBAAI,CAAC,OAAK,OAAL,CAAa,SAAb,CAAuB,QAAvB,CAAgC,CAAhC,CAAL,EAAyC;AACvC,yBAAK,YAAL,CAAkB,IAAlB,CAAuB,CAAvB;AACA,yBAAK,OAAL,CAAa,SAAb,CAAuB,GAAvB,CAA2B,CAA3B;AACD;AACF;AACF,WAVD;AAWD,S;;mCAED,a,0BAAc,O,EAAS;AAAA;;AACrB,cAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,sBAAU,CAAC,OAAD,CAAV;AACD;AACD,kBAAQ,OAAR,CAAgB,aAAK;AACnB,gBAAI,OAAK,OAAL,CAAa,SAAb,CAAuB,QAAvB,CAAgC,CAAhC,KAAsC,OAAK,YAAL,CAAkB,OAAlB,CAA0B,CAA1B,IAA+B,CAAC,CAA1E,EAA6E;AAC3E,qBAAK,OAAL,CAAa,SAAb,CAAuB,MAAvB,CAA8B,CAA9B;AACA,qBAAK,YAAL,CAAkB,MAAlB,CAAyB,OAAK,YAAL,CAAkB,OAAlB,CAA0B,CAA1B,CAAzB,EAAuD,CAAvD;AACD;AACF,WALD;AAMD,S","file":"common/attributeManager.js","sourceRoot":"/source/","sourcesContent":["/**\r\n * Adds css classes to a given element only if these classes are not already\r\n * present. Keeps a record of css classes which actually have been added.\r\n * This way, they can also be removed in a way which keeps the original classes\r\n * set by the user.\r\n * Most useful in attached() and detached() handlers.\r\n */\r\nexport class AttributeManager {\r\n  _colorClasses = [\r\n    'accent',\r\n    'primary'\r\n  ];\r\n  addedClasses = [];\r\n  addedAttributes = {};\r\n\r\n  constructor(element) {\r\n    this.element = element;\r\n  }\r\n\r\n  addAttributes(attrs) {\r\n    let keys = Object.keys(attrs);\r\n    keys.forEach(k => {\r\n      if (!this.element.getAttribute(k)) {\r\n        this.addedAttributes[k] = attrs[k];\r\n        this.element.setAttribute(k, attrs[k]);\r\n      } else if (this.element.getAttribute(k) !== attrs[k]) {\r\n        this.element.setAttribute(k, attrs[k]);\r\n      }\r\n    });\r\n  }\r\n\r\n  removeAttributes(attrs) {\r\n    if (typeof attrs === 'string') {\r\n      attrs = [attrs];\r\n    }\r\n    attrs.forEach(a => {\r\n      if (this.element.getAttribute(a) && !!this.addedAttributes[a]) {\r\n        this.element.removeAttribute(a);\r\n        this.addedAttributes[a] = null;\r\n        delete this.addedAttributes[a];\r\n      }\r\n    });\r\n  }\r\n\r\n  addClasses(classes) {\r\n    if (typeof classes === 'string') {\r\n      classes = [classes];\r\n    }\r\n    classes.forEach(c => {\r\n      let classListHasColor = this._colorClasses.filter(cc => this.element.classList.contains(cc)).length > 0;\r\n      if (this._colorClasses.indexOf(c) > -1 && classListHasColor) {\r\n        //\r\n      } else {\r\n        if (!this.element.classList.contains(c)) {\r\n          this.addedClasses.push(c);\r\n          this.element.classList.add(c);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  removeClasses(classes) {\r\n    if (typeof classes === 'string') {\r\n      classes = [classes];\r\n    }\r\n    classes.forEach(c => {\r\n      if (this.element.classList.contains(c) && this.addedClasses.indexOf(c) > -1) {\r\n        this.element.classList.remove(c);\r\n        this.addedClasses.splice(this.addedClasses.indexOf(c), 1);\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}