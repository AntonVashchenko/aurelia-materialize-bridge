{"version":3,"sources":["scrollfire/scrollfire.js"],"names":[],"mappings":";;;2DAOa,YAAY;;;;;;2CAPhB,eAAe;;2CACf,MAAM;;kCACN,SAAS;;yCACT,eAAe;;;AAIX,kBAAY;AAEZ,iBAFA,YAAY,CAEX,OAAO,EAAE,eAAe,EAAE;;;eADtC,QAAQ,GAAG,CAAC;;AAEV,yBAAe,CAAC,KAAK,EAAE,CAAC;AACxB,cAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,cAAI,CAAC,GAAG,GAAG,SAAS,CAAC,eAAe,CAAC,CAAC;SACvC;;AANU,oBAAY,WAQvB,QAAQ,GAAA,oBAAG;;;AACT,cAAI,OAAO,GAAG,CAAC,CAAC,wBAAwB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;AACxD,cAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;;AACtB,oBAAK,GAAG,CAAC,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AACnC,kBAAI,IAAI,QAAO,CAAC;AAChB,kBAAI,OAAO,GAAG,EAAE,CAAC;AACjB,qBAAO,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,EAAE,EAAK;AACtB,oBAAI,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACnB,oBAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;AACtB,wBAAM,CAAC,IAAI,CAAC,IAAI,4BAA0B,IAAI,CAAC,QAAQ,EAAE,CAAG,CAAC;iBAC9D;AACD,uBAAO,CAAC,IAAI,CAAC;AACX,0BAAQ,EAAE,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;AACjC,0BAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,sBAAsB,CAAC,CAAC,SAAS,CAAC,QAAQ;AACrE,wBAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,sBAAsB,CAAC,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC;iBAChF,CAAC,CAAC;eACJ,CAAC,CAAC;AACH,kBAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;AACtB,sBAAK,GAAG,CAAC,KAAK,CAAC,4CAA4C,EAAE,OAAO,CAAC,CAAC;AACtE,2BAAW,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;eACjC;;WACF;SACF;;4BA9BU,YAAY;AAAZ,oBAAY,GADxB,MAAM,CAAC,OAAO,EAAE,eAAe,CAAC,CACpB,YAAY,KAAZ,YAAY;AAAZ,oBAAY,GAFxB,eAAe,CAAC,eAAe,CAAC,CAEpB,YAAY,KAAZ,YAAY;eAAZ,YAAY","file":"scrollfire/scrollfire.js","sourceRoot":"/source/","sourcesContent":["import { customAttribute } from 'aurelia-templating';\nimport { inject } from 'aurelia-dependency-injection';\nimport { getLogger } from 'aurelia-logging';\nimport { ScrollfirePatch } from './scrollfire-patch';\n\n@customAttribute('md-scrollfire')\n@inject(Element, ScrollfirePatch)\nexport class MdScrollfire {\n  targetId = 0;\n  constructor(element, scrollfirePatch) {\n    scrollfirePatch.patch();\n    this.element = element;\n    this.log = getLogger('md-scrollfire');\n  }\n\n  attached() {\n    let targets = $('[md-scrollfire-target]', this.element);\n    if (targets.length > 0) {\n      this.log.debug('targets', targets);\n      let self = this;\n      let options = [];\n      targets.each((i, el) => {\n        let target = $(el);\n        if (!target.attr('id')) {\n          target.attr('id', `md-scrollfire-target-${self.targetId++}`);\n        }\n        options.push({\n          selector: '#' + target.attr('id'),\n          callback: target.get(0).au['md-scrollfire-target'].viewModel.callback,\n          offset: parseInt(target.get(0).au['md-scrollfire-target'].viewModel.offset, 10)\n        });\n      });\n      if (options.length > 0) {\n        this.log.debug('configuring scrollFire with these options:', options);\n        Materialize.scrollFire(options);\n      }\n    }\n  }\n}\n"]}