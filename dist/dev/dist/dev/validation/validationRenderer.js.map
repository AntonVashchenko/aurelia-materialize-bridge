{"version":3,"sources":["validation/validationRenderer.js"],"names":["MaterializeFormValidationRenderer","className","classNameFirst","pushElementResult","elementResults","element","result","has","get","push","set","render","instruction","elementResultsToUnrender","Map","unrender","elements","results","mdUnrenderValidateResults","defaultUnrenderValidateResults","elementResultsToRender","mdRenderValidateResults","defaultRenderValidateResults","tagName","removeValidationClasses","addValidationClasses","find","x","valid","addMessage","message","document","createElement","id","textContent","querySelectorAll","length","style","opacity","appendChild","nextSibling","window","getComputedStyle","removeMessage","querySelector","removeChild","input","classList","remove","isValid","add"],"mappings":"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","file":"../../../validation/validationRenderer.js","sourcesContent":["export class MaterializeFormValidationRenderer {\n\n  className = 'md-input-validation';\n  classNameFirst = 'md-input-validation-first';\n\n  pushElementResult(elementResults, element, result) {\n    if(elementResults.has(element)) {\n      elementResults.get(element).push(result);\n    } else {\n      elementResults.set(element, [result]);\n    }\n  }\n\n  render(instruction) {\n    let elementResultsToUnrender = new Map();\n    // group validation results to unrender by elements\n    for (let { result, elements } of instruction.unrender) {\n      for (let element of elements) {\n        this.pushElementResult(elementResultsToUnrender, element, result);\n      }\n    }\n    for(let [element, results] of elementResultsToUnrender) {\n      if (element.mdUnrenderValidateResults) {\n        element.mdUnrenderValidateResults(results, this);\n      } else {\n        this.defaultUnrenderValidateResults(element, results);\n      }\n    }\n\n    // group validation results to render by elements\n    let elementResultsToRender = new Map();\n    for (let { result, elements } of instruction.render) {\n      for (let element of elements) {\n        this.pushElementResult(elementResultsToRender, element, result);\n      }\n    }\n    for(let [element, results] of elementResultsToRender) {\n      if (element.mdUnrenderValidateResults) {\n        element.mdRenderValidateResults(results, this);\n      } else {\n        this.defaultRenderValidateResults(element, results);\n      }\n    }\n  }\n\n  defaultUnrenderValidateResults(element, results) {\n    if(element.tagName !== 'INPUT') {\n      return;\n    }\n    this.removeValidationClasses(element);\n  }\n\n  defaultRenderValidateResults(element, results) {\n    if(element.tagName !== 'INPUT') {\n      return;\n    }\n    this.addValidationClasses(element, !results.find(x => !x.valid));\n  }\n\n  addMessage(element, result) {\n    let message = document.createElement('div');\n    message.id = `md-input-validation-${result.id}`;\n    message.textContent = result.message;\n    message.className = this.className;\n    if (element.querySelectorAll('.' + this.className).length === 0) {\n      message.className += ' ' + this.classNameFirst;\n    }\n    message.style.opacity = 0;\n    element.appendChild(message, element.nextSibling);\n    window.getComputedStyle(message).opacity;\n    message.style.opacity = 1;\n  }\n\n  removeMessage(element, result) {\n    let message = element.querySelector(`#md-input-validation-${result.id}`);\n    if (message) {\n      element.removeChild(message);\n    }\n  }\n\n  removeValidationClasses(input) {\n    input.classList.remove('valid');\n    input.classList.remove('invalid');\n  }\n\n  addValidationClasses(input, isValid) {\n    if (isValid) {\n      input.classList.remove('invalid');\n      input.classList.add('valid');\n    } else {\n      input.classList.remove('valid');\n      input.classList.add('invalid');\n    }\n  }\n}\n"]}