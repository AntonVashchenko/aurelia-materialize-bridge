{"version":3,"sources":["validation/validationRenderer.js"],"names":[],"mappings":";;;;;;;;;;;;;;mDAAa;;;;;oDAEX,yBAAO,aAAa;AAClB,+BAAgC,YAAY,QAAZ,8GAAhC,IAAsD;;;;;;;;;;;;;gBAA3C,oBAA2C;gBAApC,0BAAoC;;AACpD,kCAAoB,6HAApB,IAA8B;;;;;;;;;;;;kBAArB,gBAAqB;;AAC5B,mBAAK,MAAL,CAAY,OAAZ,EAAqB,KAArB,EAD4B;aAA9B;WADF;;AAMA,gCAAgC,YAAY,MAAZ,qHAAhC,IAAoD;;;;;;;;;;;;;gBAAzC,oBAAyC;gBAAlC,0BAAkC;;AAClD,kCAAoB,6HAApB,IAA8B;;;;;;;;;;;;kBAArB,iBAAqB;;AAC5B,mBAAK,GAAL,CAAS,QAAT,EAAkB,KAAlB,EAD4B;aAA9B;WADF;;;AATS,oDAgBX,mBAAI,SAAS,OAAO;AAClB,kBAAQ,QAAQ,OAAR;AACR,iBAAK,UAAL;AAAiB;AACf,oBAAI,eAAe,MAAM,OAAN,IAAiB,OAAjB,CADJ;AAEf,oBAAI,QAAQ,QAAQ,aAAR,CAAsB,OAAtB,CAAR,CAFW;AAGf,oBAAI,KAAJ,EAAW;AACT,wBAAM,SAAN,CAAgB,MAAhB,CAAuB,OAAvB,EADS;AAET,wBAAM,SAAN,CAAgB,GAAhB,CAAoB,SAApB,EAFS;;AAKT,wBAAM,MAAN,GAAe,KAAf,CALS;;AAOT,sBAAI,QAAQ,QAAQ,aAAR,CAAsB,OAAtB,CAAR,CAPK;AAQT,sBAAI,KAAJ,EAAW;AACT,0BAAM,SAAN,CAAgB,GAAhB,CAAoB,QAApB,EADS;;AAIT,wBAAI,MAAM,MAAM,YAAN,CAAmB,YAAnB,CAAN,CAJK;AAKT,wBAAG,CAAC,GAAD,EAAM;AAEP,4BAAM,YAAN,CAAmB,YAAnB,EAAiC,YAAjC,EAFO;qBAAT,MAGO;AAEL,4BAAM,OAAN,GAAgB,GAAhB,CAFK;qBAHP;mBALF;iBARF;AAsBA,sBAzBe;eAAjB;AADA;AA4BS,oBAAT;AA5BA,WADkB;;;AAhBT,oDAiDX,yBAAO,SAAS,OAAO;AACrB,kBAAQ,QAAQ,OAAR;AACR,iBAAK,UAAL;AAAiB;AACf,oBAAI,QAAQ,QAAQ,aAAR,CAAsB,OAAtB,CAAR,CADW;AAEf,oBAAI,KAAJ,EAAW;AACT,wBAAM,SAAN,CAAgB,MAAhB,CAAuB,SAAvB,EADS;AAET,wBAAM,SAAN,CAAgB,GAAhB,CAAoB,OAApB,EAFS;iBAAX;AAIA,sBANe;eAAjB;AADA;AASS,oBAAT;AATA,WADqB;;;eAjDZ","file":"validation/validationRenderer.js","sourceRoot":"/source/","sourcesContent":["export class MaterializeFormValidationRenderer {\n\n  render(instruction) {\n    for (let { error, elements } of instruction.unrender) {\n      for (let element of elements) {\n        this.remove(element, error);\n      }\n    }\n\n    for (let { error, elements } of instruction.render) {\n      for (let element of elements) {\n        this.add(element, error);\n      }\n    }\n  }\n\n  add(element, error) {\n    switch (element.tagName) {\n    case 'MD-INPUT': {\n      let errorMessage = error.message || 'error';\n      let input = element.querySelector('input');\n      if (input) {\n        input.classList.remove('valid');\n        input.classList.add('invalid');\n\n        // focus target\n        error.target = input;\n\n        let label = element.querySelector('label');\n        if (label) {\n          label.classList.add('active');\n\n          // get error message from label\n          let msg = label.getAttribute('data-error');\n          if(!msg) {\n            // error message not set? add\n            label.setAttribute('data-error', errorMessage);\n          } else {\n            // set label message into error object\n            error.message = msg;\n          }\n        }\n      }\n      break;\n    }\n    default: break;\n    }\n  }\n\n  remove(element, error) {\n    switch (element.tagName) {\n    case 'MD-INPUT': {\n      let input = element.querySelector('input');\n      if (input) {\n        input.classList.remove('invalid');\n        input.classList.add('valid');\n      }\n      break;\n    }\n    default: break;\n    }\n  }\n\n}\n"]}