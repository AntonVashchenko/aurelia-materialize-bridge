{"version":3,"sources":["validation/validationRenderer.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAS;;AACA;;;mDAII,4CADZ,OAAO,OAAP,GADA;AAIC,iBAFW,iCAEX,CAAY,eAAZ,EAA6B;gCAFlB,mCAEkB;;AAC3B,eAAK,eAAL,GAAuB,eAAvB,CAD2B;SAA7B;;AAFW,oDAMX,yBAAO,OAAO,QAAQ;AACpB,cAAI,CAAC,MAAD,IAAW,EAAE,KAAK,eAAL,KAAyB,MAAzB,IAAmC,KAAK,eAAL,CAAqB,QAArB,CAA8B,MAA9B,CAAnC,CAAF,EAA6E;AAC1F,mBAD0F;WAA5F;;AAIA,cAAI,eAAe,MAAM,OAAN,IAAiB,OAAjB,CALC;;AAOpB,kBAAQ,OAAO,OAAP;AACN,iBAAK,UAAL;AAAiB;AACf,oBAAI,QAAQ,OAAO,aAAP,CAAqB,OAArB,CAAR,CADW;AAEf,oBAAI,KAAJ,EAAW;AACT,wBAAM,SAAN,CAAgB,MAAhB,CAAuB,OAAvB,EADS;AAET,wBAAM,SAAN,CAAgB,GAAhB,CAAoB,SAApB,EAFS;;AAKT,wBAAM,MAAN,GAAe,KAAf,CALS;;AAOT,sBAAI,QAAY,OAAO,aAAP,CAAqB,OAArB,CAAZ,CAPK;AAQT,sBAAI,KAAJ,EAAW;AACT,0BAAM,SAAN,CAAgB,MAAhB,CAAuB,OAAvB,EADS;AAET,0BAAM,SAAN,CAAgB,GAAhB,CAAoB,QAApB,EAFS;AAGT,0BAAM,SAAN,CAAgB,GAAhB,CAAoB,SAApB,EAHS;;AAMT,wBAAI,MAAM,MAAM,YAAN,CAAmB,YAAnB,CAAN,CANK;AAOT,wBAAG,CAAC,GAAD,EAAM;AAEP,4BAAM,YAAN,CAAmB,YAAnB,EAAiC,YAAjC,EAFO;qBAAT,MAGO;AAEL,4BAAM,OAAN,GAAgB,GAAhB,CAFK;qBAHP;mBAPF;iBARF;AAwBA,sBA1Be;eAAjB;AADF,WAPoB;;AAuCpB,iBAAO,MAAP,GAAiB,OAAO,MAAP,IAAiB,IAAI,GAAJ,EAAjB,CAvCG;AAwCpB,iBAAO,MAAP,CAAc,GAAd,CAAkB,KAAlB,EAxCoB;;;AANX,oDAiDX,6BAAS,OAAO,QAAQ;AACtB,cAAI,CAAC,MAAD,IAAW,CAAC,OAAO,MAAP,IAAiB,CAAC,OAAO,MAAP,CAAc,GAAd,CAAkB,KAAlB,CAAD,EAA2B;AAC1D,mBAD0D;WAA5D;;AAIA,iBAAO,MAAP,CAAc,MAAd,CAAqB,KAArB,EALsB;;AAOtB,kBAAQ,OAAO,OAAP;AACN,iBAAK,UAAL;AAAiB;AACf,oBAAI,QAAQ,OAAO,aAAP,CAAqB,OAArB,CAAR,CADW;AAEf,oBAAI,KAAJ,EAAW;;AAET,wBAAM,SAAN,CAAgB,MAAhB,CAAuB,SAAvB,EAFS;AAGT,wBAAM,SAAN,CAAgB,GAAhB,CAAoB,OAApB,EAHS;;AAKT,sBAAI,QAAY,OAAO,aAAP,CAAqB,OAArB,CAAZ,CALK;AAMT,sBAAI,KAAJ,EAAW;AACT,0BAAM,SAAN,CAAgB,MAAhB,CAAuB,SAAvB,EADS;AAET,0BAAM,SAAN,CAAgB,GAAhB,CAAoB,OAApB,EAFS;mBAAX;iBANF;AAWA,sBAbe;eAAjB;AADF,WAPsB;;;eAjDb","file":"validation/validationRenderer.js","sourceRoot":"/source/","sourcesContent":["import { inject } from 'aurelia-dependency-injection';\nimport { validationRenderer } from 'aurelia-validation';\n\n@validationRenderer\n@inject(Element)\nexport class MaterializeFormValidationRenderer {\n\n  constructor(boundaryElement) {\n    this.boundaryElement = boundaryElement;\n  }\n\n  render(error, target) {\n    if (!target || !(this.boundaryElement === target || this.boundaryElement.contains(target))) {\n      return;\n    }\n\n    let errorMessage = error.message || 'error';\n\n    switch (target.tagName) {\n      case 'MD-INPUT': {\n        let input = target.querySelector('input');\n        if (input) {\n          input.classList.remove('valid');\n          input.classList.add('invalid');\n\n          // focus target\n          error.target = input;\n\n          let label:any = target.querySelector('label');\n          if (label) {\n            label.classList.remove('valid');\n            label.classList.add('active');\n            label.classList.add('invalid');\n\n            // get error message from label\n            let msg = label.getAttribute('data-error');\n            if(!msg) {\n              // error message not set? add\n              label.setAttribute('data-error', errorMessage);\n            } else {\n              // set label message into error object\n              error.message = msg;\n            }\n          }\n        }\n        break;\n      }\n    }\n\n    // tag the element so we know we rendered into it.\n    target.errors = (target.errors || new Map());\n    target.errors.set(error);\n  }\n\n  unrender(error, target) {\n    if (!target || !target.errors || !target.errors.has(error)) {\n      return;\n    }\n\n    target.errors.delete(error);\n\n    switch (target.tagName) {\n      case 'MD-INPUT': {\n        let input = target.querySelector('input');\n        if (input) {\n\n          input.classList.remove('invalid');\n          input.classList.add('valid');\n\n          let label:any = target.querySelector('label');\n          if (label) {\n            label.classList.remove('invalid');\n            label.classList.add('valid');\n          }\n        }\n        break;\n      }\n    }\n  }\n\n}\n"]}