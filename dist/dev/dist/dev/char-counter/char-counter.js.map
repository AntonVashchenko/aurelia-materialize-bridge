{"version":3,"sources":["char-counter/char-counter.js"],"names":[],"mappings":";;;2DAMa,aAAa;;;;;;;;;;oCANjB,QAAQ;2CAAE,eAAe;;2CACzB,MAAM;;iDACN,gBAAgB;;;AAIZ,mBAAa;;;8BAAb,aAAa;;uBACvB,QAAQ,EAAE;;mBAAU,GAAG;;;;;AAEb,iBAHA,aAAa,CAGZ,OAAO,EAAE;;;;;AACnB,cAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,cAAI,CAAC,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC5D;;AANU,qBAAa,WAQxB,QAAQ,GAAA,oBAAG;;;AACT,cAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;;AAIxC,cAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,OAAO,EAAE;AAClD,gBAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;AAC/D,aAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;WACpC,MAAM;AACL,aAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,EAAE,EAAK;AAAE,eAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAK,MAAM,CAAC,CAAC;aAAE,CAAC,CAAC;AACtF,aAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;WAClD;SACF;;AApBU,qBAAa,WAsBxB,QAAQ,GAAA,oBAAG;AACT,cAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;SACpD;;6BAxBU,aAAa;AAAb,qBAAa,GADzB,MAAM,CAAC,OAAO,CAAC,CACH,aAAa,KAAb,aAAa;AAAb,qBAAa,GAFzB,eAAe,CAAC,iBAAiB,CAAC,CAEtB,aAAa,KAAb,aAAa;eAAb,aAAa","file":"char-counter/char-counter.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customAttribute } from 'aurelia-templating';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { AttributeManager } from '../common/attributeManager';\r\n\r\n@customAttribute('md-char-counter')\r\n@inject(Element)\r\nexport class MdCharCounter {\r\n  @bindable() length = 120;\r\n\r\n  constructor(element) {\r\n    this.element = element;\r\n    this.attributeManager = new AttributeManager(this.element);\r\n  }\r\n\r\n  attached() {\r\n    this.length = parseInt(this.length, 10);\r\n\r\n    // attach to input element explicitly, so this counter can be used on\r\n    // containers (or custom elements like md-input)\r\n    if (this.element.tagName.toUpperCase() === 'INPUT') {\r\n      this.attributeManager.addAttributes({ 'length': this.length });\r\n      $(this.element).characterCounter();\r\n    } else {\r\n      $(this.element).find('input').each((i, el) => { $(el).attr('length', this.length); });\r\n      $(this.element).find('input').characterCounter();\r\n    }\r\n  }\r\n\r\n  detached() {\r\n    this.attributeManager.removeAttributes(['length']);\r\n  }\r\n}\r\n"]}