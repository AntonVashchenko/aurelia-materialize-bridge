{"version":3,"sources":["button/button.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAS,c,sBAAA,Q;AAAU,qB,sBAAA,e;;AACV,Y,+BAAA,M;;AACA,sB,2BAAA,gB;;AACA,kC,qBAAA,4B;;;0BAII,Q,WAFZ,gBAAgB,WAAhB,C,UACA,OAAO,OAAP,C,UAEE,U,UACA,U,UACA,U,UACA,U;AAED,0BAAY,OAAZ,EAAqB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACnB,eAAK,gBAAL,GAAwB,IAAI,gBAAJ,CAAqB,OAArB,CAAxB;AACD;;2BAED,Q,uBAAW;AACT,cAAI,UAAU,EAAd;;AAEA,cAAI,6BAA6B,KAAK,IAAlC,CAAJ,EAA6C;AAC3C,oBAAQ,IAAR,CAAa,UAAb;AACD;AACD,cAAI,6BAA6B,KAAK,QAAlC,CAAJ,EAAiD;AAC/C,oBAAQ,IAAR,CAAa,cAAb;AACD;AACD,cAAI,6BAA6B,KAAK,KAAlC,CAAJ,EAA8C;AAC5C,oBAAQ,IAAR,CAAa,WAAb;AACD;;AAED,cAAI,QAAQ,MAAR,KAAmB,CAAvB,EAA0B;AACxB,oBAAQ,IAAR,CAAa,KAAb;AACD;;AAED,cAAI,6BAA6B,KAAK,QAAlC,CAAJ,EAAiD;AAC/C,oBAAQ,IAAR,CAAa,UAAb;AACD;;AAED,cAAI,CAAC,6BAA6B,KAAK,IAAlC,CAAL,EAA8C;AAC5C,oBAAQ,IAAR,CAAa,QAAb;AACD;AACD,eAAK,gBAAL,CAAsB,UAAtB,CAAiC,OAAjC;AACD,S;;2BAED,Q,uBAAW;AACT,eAAK,gBAAL,CAAsB,aAAtB,CAAoC,CAAC,QAAD,EAAW,KAAX,EAAkB,UAAlB,EAA8B,WAA9B,EAA2C,UAA3C,CAApC;AACD,S;;2BAED,e,4BAAgB,Q,EAAU;AACxB,cAAI,6BAA6B,QAA7B,CAAJ,EAA4C;AAC1C,iBAAK,gBAAL,CAAsB,UAAtB,CAAiC,UAAjC;AACD,WAFD,MAEO;AACL,iBAAK,gBAAL,CAAsB,aAAtB,CAAoC,UAApC;AACD;AACF,S;;2BAED,W,wBAAY,Q,EAAU;AACpB,cAAI,6BAA6B,QAA7B,CAAJ,EAA4C;AAC1C,iBAAK,gBAAL,CAAsB,aAAtB,CAAoC,CAAC,KAAD,EAAQ,QAAR,CAApC;AACA,iBAAK,gBAAL,CAAsB,UAAtB,CAAiC,UAAjC;AACD,WAHD,MAGO;AACL,iBAAK,gBAAL,CAAsB,aAAtB,CAAoC,UAApC;AACA,iBAAK,gBAAL,CAAsB,UAAtB,CAAiC,CAAC,KAAD,EAAQ,QAAR,CAAjC;AACD;AACF,S;;;;;;iBAxDsB,K;;;;;iBACJ,K;;;;;iBACI,K;;;;;iBACH,K","file":"button/button.js","sourceRoot":"/source/","sourcesContent":["import { bindable, customAttribute } from 'aurelia-templating';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { AttributeManager } from '../common/attributeManager';\r\nimport { getBooleanFromAttributeValue } from '../common/attributes';\r\n\r\n@customAttribute('md-button')\r\n@inject(Element)\r\nexport class MdButton {\r\n  @bindable() disabled = false;\r\n  @bindable() flat = false;\r\n  @bindable() floating = false;\r\n  @bindable() large = false;\r\n\r\n  constructor(element) {\r\n    this.attributeManager = new AttributeManager(element);\r\n  }\r\n\r\n  attached() {\r\n    let classes = [];\r\n\r\n    if (getBooleanFromAttributeValue(this.flat)) {\r\n      classes.push('btn-flat');\r\n    }\r\n    if (getBooleanFromAttributeValue(this.floating)) {\r\n      classes.push('btn-floating');\r\n    }\r\n    if (getBooleanFromAttributeValue(this.large)) {\r\n      classes.push('btn-large');\r\n    }\r\n\r\n    if (classes.length === 0) {\r\n      classes.push('btn');\r\n    }\r\n\r\n    if (getBooleanFromAttributeValue(this.disabled)) {\r\n      classes.push('disabled');\r\n    }\r\n\r\n    if (!getBooleanFromAttributeValue(this.flat)) {\r\n      classes.push('accent');\r\n    }\r\n    this.attributeManager.addClasses(classes);\r\n  }\r\n\r\n  detached() {\r\n    this.attributeManager.removeClasses(['accent', 'btn', 'btn-flat', 'btn-large', 'disabled']);\r\n  }\r\n\r\n  disabledChanged(newValue) {\r\n    if (getBooleanFromAttributeValue(newValue)) {\r\n      this.attributeManager.addClasses('disabled');\r\n    } else {\r\n      this.attributeManager.removeClasses('disabled');\r\n    }\r\n  }\r\n\r\n  flatChanged(newValue) {\r\n    if (getBooleanFromAttributeValue(newValue)) {\r\n      this.attributeManager.removeClasses(['btn', 'accent']);\r\n      this.attributeManager.addClasses('btn-flat');\r\n    } else {\r\n      this.attributeManager.removeClasses('btn-flat');\r\n      this.attributeManager.addClasses(['btn', 'accent']);\r\n    }\r\n  }\r\n}\r\n"]}